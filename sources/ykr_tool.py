# -*- coding: utf-8 -*-
"""
/***************************************************************************
 YKRTool
                                 A QGIS plugin
 Tampereen tulevaisuuden yhdyskuntarakenteen CO2 Emissions Tool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-05
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Gispo Ltd.
        email                : mikael@gispo.fi
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5 import uic
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

from qgis.core import (Qgis, QgsVectorLayer, QgsCoordinateReferenceSystem,
    QgsApplication, QgsDataSourceUri, QgsProject, QgsTaskManager,
    QgsProcessingAlgRunnerTask, QgsProcessingContext, QgsProcessingFeedback, QgsMessageLog,
    QgsExpression, QgsFeatureRequest,
    QgsFeature, QgsField)
from qgis.gui import QgsFileWidget
from functools import partial

# Initialize Qt resources from file resources.py
from ..resources import *
# Import the code for the dialog
import processing
import uuid
import os.path
import psycopg2
import datetime, getpass
import re
import traceback
from configparser import ConfigParser
from .ykr_tool_dictionaries import YKRToolDictionaries
from .ykr_tool_tasks import QueryTask
from .createdbconnection import createDbConnection
from .ykr_zones_stats import YKRZonesStats
from .ykr_tool_upload_layer import YKRToolUploadLayer

class YKRTool:
    """QGIS Plugin Implementation."""

    MAX_TABLE_NAME_LENGTH = 62

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.split(os.path.dirname(__file__))[0]
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'YKRTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CO2 Emissions Tool')

        self.conn = None
        self.connParams = None

        self.loadDatabaseConnectionSettingsAutomatically = True if QSettings().value("/YKRTool/loadDatabaseConnectionSettingsAutomatically", "True", type=str).lower() == 'true' else False
        if self.loadDatabaseConnectionSettingsAutomatically:
            configFilePath = QSettings().value("/YKRTool/configFilePath", "", type=str)
            if configFilePath != "":
                self.connParams = self.parseConfigFile(configFilePath)

        self.rememberCalculationSettingsBetweenRuns = True if QSettings().value("/YKRTool/rememberCalculationSettingsBetweenRuns", "True", type=str).lower() == 'true' else False

        self.rememberCalculationSettingsExitingQGIS = True if QSettings().value("/YKRTool/rememberCalculationSettingsExitingQGIS", "True", type=str).lower() == 'true' else False
        # * if true then store to QSettings and load from QSettings when exiting & starting
        # * if false then do not load  from QSettings and store to QSettings when starting & exiting

        self.tableNames = {}

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.mainDialog = uic.loadUi(os.path.join(self.plugin_dir, 'ui', 'ykr_tool_main.ui'))
        self.userSettingsDialog = uic.loadUi(os.path.join(self.plugin_dir, 'ui', 'ykr_tool_user_settings.ui'))
        self.databaseSettingsDialog = uic.loadUi(os.path.join(self.plugin_dir, 'ui', 'ykr_tool_db_settings.ui'))
        self.infoDialog = uic.loadUi(os.path.join(self.plugin_dir, 'ui', 'ykr_tool_info.ui'))

        self.NameOfTheCO2EstimationRun = None

        self.DEFAULT_TARGET_YEAR = 2035

        self.targetYear = self.DEFAULT_TARGET_YEAR
        self.ykrPopLayer = None
        self.ykrBuildingsLayer = None
        self.ykrJobsLayer = None

        self.ykrToolDictionaries = YKRToolDictionaries(self.iface, locale)
        self.ykrZonesStats = YKRZonesStats(self.ykrToolDictionaries, self.connParams, self.iface)
        self.ykrToolUploadLayer = YKRToolUploadLayer(self.iface)

        self.investigatedAreaMapLayer = None
        self.predefinedAreaDBTableName = None
        self.municipalitiesArrayString = 'array[837]'

        self.futureAreasLayer = None
        self.futureNetworkLayer = None
        self.futureStopsLayer = None
        self.futureZoningAreasTableName = None
        self.futureNetworkLayerDBTableName = None
        self.futureStopsLayerDBTableName = None

        self.calculateFuture = False

        # self.ykrUploadedPopTableName = None
        # self.ykrUploadedJobTableName = None

        self.inputLayers = []

        self.resultLayers = []


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('YKRTool', message)


    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ykr_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CO2 Emissions Tool'),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        # self.add_action(
        #     icon_path,
        #     text=self.tr(u'Create YKR summary statistics'),
        #     callback=self.runYkrSummaryStatistics,
        #     parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):

        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CO2 Emissions Tool'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.setupMainDialog()
            if self.rememberCalculationSettingsExitingQGIS:
                self.restoreSavedCalculationSettings()

        self.mainDialog.show()

        # Run the dialog event loop
        result = self.mainDialog.exec_()
        # See if OK was pressed
        if result:
            self.runProcess()

    def runProcess(self, retriesLeft=3):
        try:
            shouldRun = self.preProcess()
            if shouldRun == False:
                return False
        except Exception as e:
            if retriesLeft > 0:
                return self.runProcess(retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(self.tr('Error in preprocessing'),
                    str(e), Qgis.Critical, duration=0)
                self.cleanUpSession()
                return False

        return True


    def preProcess(self):
        self.resultLayers = []
        '''Starts calculation'''
        if not self.connParams:
            self.iface.messageBar().pushMessage(self.tr('Database connection not setup'), Qgis.Critical, duration=0)
            return False
            # configFilePath = QSettings().value("/YKRTool/configFilePath", "", type=str)
            # self.connParams = self.parseConfigFile(configFilePath)
        self.conn = createDbConnection(self.connParams)
        self.cur = self.conn.cursor()
        self.sessionParams = self.generateSessionParameters()
        self.readProcessingInput()
        return True
    

    def setupMainDialog(self):
        '''Sets up the main dialog'''
        md = self.mainDialog

        md.finished.connect(self.calculationDialogFinished)

        md.radioButtonUseMapLayerForInvestigatedArea.clicked.connect(self.handleRadioButtonUseMapLayerForInvestigatedAreaToggle)
        md.radioButtonUsePredefinedAreaForInvestigatedArea.clicked.connect(self.handleRadioButtonUsePredefinedAreaForInvestigatedAreaToggle)

        names = self.ykrToolDictionaries.getPredefinedAreaNames()
        md.comboBoxPredefinedArea.addItems(names)

        names = self.ykrToolDictionaries.getPITKOScenarioNames()
        md.pitkoScenario.addItems(names)

        names = self.ykrToolDictionaries.getEmissionAllocationMethodNames()
        md.emissionsAllocation.addItems(names)

        names = self.ykrToolDictionaries.getElectricityTypeNames()
        md.elecEmissionType.addItems(names)

        #md.checkBoxOnlySelectedFeats.setEnabled(False)
        md.futureBox.setEnabled(False)
        names = self.ykrToolDictionaries.getPredefinedFutureZoningAreasUserFriendlyNames()
        md.comboBoxPredefinedFutureAreas.addItems(names)

        urbanCenterNames = self.ykrToolDictionaries.getPredefinedUrbanCenterLayersUserFriendlyNames()
        md.comboBoxPredefinedFutureNetwork.addItems(urbanCenterNames)

        publicTransportStopsNames = self.ykrToolDictionaries.getPredefinedFuturePublicTransportStopsUserFriendlyNames()
        md.comboBoxPredefinedFutureStops.addItems(publicTransportStopsNames)

        # names = self.ykrToolDictionaries.getYkrPopUserFriendlyNames()
        # md.comboBoxYkrPop.addItems(names)
        # names = self.ykrToolDictionaries.getYkrJobUserFriendlyNames()
        # md.comboBoxYkrJob.addItems(names)

        md.pushButtonRestoreDefaultCalculationSettings.clicked.connect(self.restoreDefaultCalculationSettings)
        md.buttonUserSettings.clicked.connect(self.displayUserSettingsDialog)
        md.buttonDatabaseSettings.clicked.connect(self.displayDatabaseSettingsDialog)
        md.infoButton.clicked.connect(lambda: self.infoDialog.show())

        # md.mapLayerComboBoxYkrPop.hide()
        # md.mapLayerComboBoxYkrJob.hide()
        # md.ykrBuildingsLayerList.hide()
        md.futureAreasLayerList.hide()
        md.futureNetworkLayerList.hide()
        md.futureStopsLayerList.hide()

        # md.checkBoxLoadYkrPopFromMapLayer.clicked.connect(self.handlePopLayerToggle)
        # md.checkBoxLoadYkrJobFromMapLayer.clicked.connect(self.handleJobLayerToggle)
        # md.ykrBuildingsLoadLayer.clicked.connect(self.handleLayerToggle)
        md.futureAreasLoadLayer.clicked.connect(self.handleLayerToggle)
        md.futureNetworkLoadLayer.clicked.connect(self.handleLayerToggle)
        md.futureStopsLoadLayer.clicked.connect(self.handleLayerToggle)

        md.checkBoxCalculateFuture.clicked.connect(self.handleLayerToggle)

        md.checkBoxCalculateEmissionsPerPerson.clicked.connect(self.handleCalculateEmissionsPerPersonToggle)
        md.checkBoxCalculateEmissionsPerJob.clicked.connect(self.handleCalculateEmissionsPerJobToggle)
        md.checkBoxCalculateEmissionsPerFloorSpaceSquares.clicked.connect(self.handleCalculateEmissionsPerFloorSpaceSquaresToggle)
        md.checkBoxVisualizeTrafficEmissions.clicked.connect(self.handleVisualizeTrafficEmissionsToggle)
        md.checkBoxVisualizeSustainableUrbanStructure.clicked.connect(self.handleVisualizeSustainableUrbanStructureToggle)
        md.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.clicked.connect(self.handleAddQuickchartIoLinksOfRelativeEmissionsByZoneToggle)


    def calculationDialogFinished(self):
        # tallenna aina, kun käyttäjä sulkee laskentaikkunan (finished-signaali)
        if self.rememberCalculationSettingsExitingQGIS:
            self.saveCalculationSettings()


    def restoreDefaultCalculationSettings(self):
        md = self.mainDialog
        
        md.lineEditNameOfTheCO2EstimationRun.setText("")

        #
        # AOI
        #
        # self.handleRadioButtonUseMapLayerForInvestigatedAreaToggle(False)
        md.radioButtonUsePredefinedAreaForInvestigatedArea.click()
        md.radioButtonUsePredefinedAreaForInvestigatedArea.setChecked(True)
        layers = list(QgsProject.instance().mapLayers().values())
        if len(layers) > 0:
            md.comboBoxMapLayer.setLayer(layers[0])
        md.comboBoxPredefinedArea.clear()
        names = self.ykrToolDictionaries.getPredefinedAreaNames()
        md.comboBoxPredefinedArea.addItems(names)
        md.checkBoxMunicipalitiesKangasala.setChecked(True)
        md.checkBoxMunicipalitiesLempaala.setChecked(True)
        md.checkBoxMunicipalitiesNokia.setChecked(True)
        md.checkBoxMunicipalitiesOrivesi.setChecked(True)
        md.checkBoxMunicipalitiesPirkkala.setChecked(True)
        md.checkBoxMunicipalitiesTampere.setChecked(True)
        md.checkBoxMunicipalitiesVesilahti.setChecked(True)
        md.checkBoxMunicipalitiesYlojarvi.setChecked(True)

        #
        # Future emissions
        #
        md.futureBox.setEnabled(False)
        md.checkBoxCalculateFuture.setChecked(False)
        md.futureAreasLoadLayer.setChecked(False)
        md.futureNetworkLoadLayer.setChecked(False)
        md.futureStopsLoadLayer.setChecked(False)
        md.comboBoxPredefinedFutureAreas.clear()
        names = self.ykrToolDictionaries.getPredefinedFutureZoningAreasUserFriendlyNames()
        md.comboBoxPredefinedFutureAreas.addItems(names)
        md.comboBoxPredefinedFutureNetwork.clear()
        urbanCenterNames = self.ykrToolDictionaries.getPredefinedUrbanCenterLayersUserFriendlyNames()
        md.comboBoxPredefinedFutureNetwork.addItems(urbanCenterNames)
        md.comboBoxPredefinedFutureStops.clear()
        publicTransportStopsNames = self.ykrToolDictionaries.getPredefinedFuturePublicTransportStopsUserFriendlyNames()
        md.comboBoxPredefinedFutureStops.addItems(publicTransportStopsNames)
        if len(layers) > 0:
            md.futureAreasLayerList.setLayer(layers[0])
            md.futureNetworkLayerList.setLayer(layers[0])
            md.futureStopsLayerList.setLayer(layers[0])
        self.targetYear = self.DEFAULT_TARGET_YEAR
        md.targetYear.setValue(self.targetYear)
        
        self.handleLayerToggle()

        #
        # Advanced settings
        #
        md.checkBoxIncludeLongDistance.setChecked(True)
        md.checkBoxIncludeBusinessTravel.setChecked(False)
        md.emissionsAllocation.clear()
        names = self.ykrToolDictionaries.getEmissionAllocationMethodNames()
        md.emissionsAllocation.addItems(names)
        md.elecEmissionType.clear()
        names = self.ykrToolDictionaries.getElectricityTypeNames()
        md.elecEmissionType.addItems(names)
        md.checkBoxNokianMyllyCO2Zeroed.setChecked(True)
        md.checkBoxCalculateEmissionsPerPerson.setChecked(True)
        md.checkBoxCalculateEmissionsPerJob.setChecked(True)
        md.checkBoxCalculateEmissionsPerFloorSpaceSquares.setChecked(True)
        md.checkBoxVisualizeTrafficEmissions.setChecked(True)
        md.checkBoxVisualizeThermoEmissions.setChecked(False)
        md.checkBoxVisualizeElectricityConsumptionEmissions.setChecked(False)
        md.checkBoxVisualizePopJobMix.setChecked(True)
        md.checkBoxVisualizeGoodZonesForPopJobDensityAndSustainableTransport.setChecked(True)
        md.checkBoxVisualizeFloorSpaceRatio.setChecked(True)
        md.checkBoxCreateYKRZoneSummaryStats.setChecked(True)
        md.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.setChecked(False)
        md.checkBoxAddQuickchartIoLinksOfZoneSquaresAndPopJobPercentagesOfTotalByZone.setChecked(False)
    

    def restoreSavedCalculationSettings(self):
        # warn of the missing layers (or other options)
        md = self.mainDialog

        #
        #
        #

        md.lineEditNameOfTheCO2EstimationRun.setText(QSettings().value("/YKRTool/nameOfTheCO2EstimationRun", "", type=str))

        useMapLayerForInvestigatedArea = True if QSettings().value("/YKRTool/useMapLayerForInvestigatedArea", "True", type=str).lower() == 'true' else False
        if useMapLayerForInvestigatedArea == True:
            md.radioButtonUseMapLayerForInvestigatedArea.click()
            md.radioButtonUseMapLayerForInvestigatedArea.setChecked(True)
        else:
            md.radioButtonUsePredefinedAreaForInvestigatedArea.click()
            md.radioButtonUsePredefinedAreaForInvestigatedArea.setChecked(True)
        mapLayerIdForInvestigatedArea = QSettings().value("/YKRTool/mapLayerIdForInvestigatedArea", "", type=str)
        mapLayerNameForInvestigatedArea = QSettings().value("/YKRTool/mapLayerNameForInvestigatedArea", "", type=str)
        if useMapLayerForInvestigatedArea == True:
            foundMapLayerIdForInvestigatedArea = False
            if QgsProject.instance().mapLayers() != None:
                for id, layer in QgsProject.instance().mapLayers().items():
                    if id == mapLayerIdForInvestigatedArea:
                        md.comboBoxMapLayer.setLayer(layer)
                        foundMapLayerIdForInvestigatedArea = True
                        break
                if foundMapLayerIdForInvestigatedArea == False:
                    self.iface.messageBar().pushMessage(self.tr('Could not find map layer for AOI that was specified in the saved settings'), self.tr('The map layer name was ') + mapLayerNameForInvestigatedArea, Qgis.Warning)
        self.predefinedAreaDBTableName = QSettings().value("/YKRTool/predefinedAreaDatabaseTableName", "", type=str)
        predefinedAreaName = self.ykrToolDictionaries.getPredefinedAreaNameFromDatabaseTableName(self.predefinedAreaDBTableName)
        md.comboBoxPredefinedArea.setCurrentText(predefinedAreaName)

        md.checkBoxMunicipalitiesKangasala.setChecked(True if QSettings().value("/YKRTool/chosenMunicipalitiesKangasala", "True", type=str).lower() == 'true' else False)
        md.checkBoxMunicipalitiesLempaala.setChecked(True if QSettings().value("/YKRTool/chosenMunicipalitiesLempaala", "True", type=str).lower() == 'true' else False)
        md.checkBoxMunicipalitiesNokia.setChecked(True if QSettings().value("/YKRTool/chosenMunicipalitiesNokia", "True", type=str).lower() == 'true' else False)
        md.checkBoxMunicipalitiesOrivesi.setChecked(True if QSettings().value("/YKRTool/chosenMunicipalitiesOrivesi", "True", type=str).lower() == 'true' else False)
        md.checkBoxMunicipalitiesPirkkala.setChecked(True if QSettings().value("/YKRTool/chosenMunicipalitiesPirkkala", "True", type=str).lower() == 'true' else False)
        md.checkBoxMunicipalitiesTampere.setChecked(True if QSettings().value("/YKRTool/chosenMunicipalitiesTampere", "True", type=str).lower() == 'true' else False)
        md.checkBoxMunicipalitiesVesilahti.setChecked(True if QSettings().value("/YKRTool/chosenMunicipalitiesVesilahti", "True", type=str).lower() == 'true' else False)
        md.checkBoxMunicipalitiesYlojarvi.setChecked(True if QSettings().value("/YKRTool/chosenMunicipalitiesYlojarvi", "True", type=str).lower() == 'true' else False)

        #
        # Future emissions
        #

        shouldCalculateFuture = True if QSettings().value("/YKRTool/shouldCalculateFuture", "False", type=str).lower() == 'true' else False
        if shouldCalculateFuture:
            md.futureBox.setEnabled(True)
            md.checkBoxCalculateFuture.setChecked(True)

        self.futureZoningAreasTableName = QSettings().value("/YKRTool/predefinedFutureAreaDBTableName", "", type=str)
        predefinedFutureZoningAreasName = self.ykrToolDictionaries.getPredefinedFutureZoningAreaNameFromDatabaseTableName(self.futureZoningAreasTableName)
        md.comboBoxPredefinedFutureAreas.setCurrentText(predefinedFutureZoningAreasName)

        self.futureNetworkTableName = QSettings().value("/YKRTool/predefinedFutureNetworkDBTableName", "", type=str)
        predefinedFutureNetworkName = self.ykrToolDictionaries.getPredefinedFutureUrbanCenterNameFromDatabaseTableName(self.futureNetworkTableName)
        md.comboBoxPredefinedFutureNetwork.setCurrentText(predefinedFutureNetworkName)

        self.futureStopsTableName = QSettings().value("/YKRTool/predefinedFutureStopsDBTableName", "", type=str)
        predefinedFutureStopsName = self.ykrToolDictionaries.getPredefinedFuturePublicTransportStopsNameFromDatabaseTableName(self.futureStopsTableName)
        md.comboBoxPredefinedFutureStops.setCurrentText(predefinedFutureStopsName)

        futureAreasLoadLayer = True if QSettings().value("/YKRTool/futureAreasLoadLayer", "False", type=str).lower() == 'true' else False
        futureNetworkLoadLayer = True if QSettings().value("/YKRTool/futureNetworkLoadLayer", "False", type=str).lower() == 'true' else False
        futureStopsLoadLayer = True if QSettings().value("/YKRTool/futureStopsLoadLayer", "False", type=str).lower() == 'true' else False
        md.futureAreasLoadLayer.setChecked(futureAreasLoadLayer)
        md.futureNetworkLoadLayer.setChecked(futureNetworkLoadLayer)
        md.futureStopsLoadLayer.setChecked(futureStopsLoadLayer)
        mapLayerIdForfutureAreasLoadLayer = QSettings().value("/YKRTool/mapLayerIdForfutureAreasLoadLayer", "", type=str)
        mapLayerNameForfutureAreasLoadLayer = QSettings().value("/YKRTool/mapLayerNameForfutureAreasLoadLayer", "", type=str)
        if futureAreasLoadLayer:
            foundMapLayerIdForfutureAreasLoadLayer = False
            if QgsProject.instance().mapLayers() != None:
                for id, layer in QgsProject.instance().mapLayers().items():
                    if id == mapLayerIdForfutureAreasLoadLayer:
                        md.futureAreasLayerList.setLayer(layer)
                        foundMapLayerIdForfutureAreasLoadLayer = True
                        break
                if foundMapLayerIdForfutureAreasLoadLayer == False:
                    self.iface.messageBar().pushMessage(self.tr('Could not find map layer for Future zoning data that was specified in the saved settings'), self.tr('The map layer name was ') + mapLayerNameForfutureAreasLoadLayer, Qgis.Warning)
        mapLayerIdForfutureNetworkLoadLayer = QSettings().value("/YKRTool/mapLayerIdForfutureNetworkLoadLayer", "", type=str)
        mapLayerNameForfutureNetworkLoadLayer = QSettings().value("/YKRTool/mapLayerNameForfutureNetworkLoadLayer", "", type=str)
        if futureNetworkLoadLayer:
            foundMapLayerIdForfutureNetworkLoadLayer = False
            if QgsProject.instance().mapLayers() != None:
                for id, layer in QgsProject.instance().mapLayers().items():
                    if id == mapLayerIdForfutureNetworkLoadLayer:
                        md.futureNetworkLayerList.setLayer(layer)
                        foundMapLayerIdForfutureNetworkLoadLayer = True
                        break
                if foundMapLayerIdForfutureNetworkLoadLayer == False:
                    self.iface.messageBar().pushMessage(self.tr('Could not find map layer for future urban center data that was specified in the saved settings'), self.tr('The map layer name was ') + mapLayerNameForfutureNetworkLoadLayer, Qgis.Warning)
        mapLayerIdForfutureStopsLoadLayer = QSettings().value("/YKRTool/mapLayerIdForfutureStopsLoadLayer", "", type=str)
        mapLayerNameForfutureStopsLoadLayer = QSettings().value("/YKRTool/mapLayerNameForfutureStopsLoadLayer", "", type=str)
        if futureStopsLoadLayer:
            foundMapLayerIdForfutureStopsLoadLayer = False
            if QgsProject.instance().mapLayers() != None:
                for id, layer in QgsProject.instance().mapLayers().items():
                    if id == mapLayerIdForfutureStopsLoadLayer:
                        md.futureStopsLayerList.setLayer(layer)
                        foundMapLayerIdForfutureStopsLoadLayer = True
                        break
                if foundMapLayerIdForfutureStopsLoadLayer == False:
                    self.iface.messageBar().pushMessage(self.tr('Could not find map layer for (future) transit stops data that was specified in the saved settings'), self.tr('The map layer name was ') + mapLayerNameForfutureStopsLoadLayer, Qgis.Warning)

        targetYear = QSettings().value("/YKRTool/targetYear", "", type=str)
        if targetYear != "":  
            self.targetYear = int(targetYear)
            md.targetYear.setValue(self.targetYear)
        else:
            self.targetYear = int(self.DEFAULT_TARGET_YEAR)
            md.targetYear.setValue(self.targetYear)
            
        self.handleLayerToggle()

        #
        # Advanced settings
        #

        md.checkBoxIncludeLongDistance.setChecked(True if QSettings().value("/YKRTool/IncludeLongDistance", "True", type=str).lower() == 'true' else False)
        md.checkBoxIncludeBusinessTravel.setChecked(True if QSettings().value("/YKRTool/IncludeBusinessTravel", "False", type=str).lower() == 'true' else False)

        emissionsAllocationName = QSettings().value("/YKRTool/emissionsAllocationName", "", type=str)
        emissionsAllocationPredefinedName = self.ykrToolDictionaries.getPredefinedEmissionAllocationMethodName(emissionsAllocationName)
        md.emissionsAllocation.setCurrentText(emissionsAllocationPredefinedName)

        ElectricityTypeName = QSettings().value("/YKRTool/ElectricityTypeName", "", type=str)
        ElectricityTypePredefinedName = self.ykrToolDictionaries.getPredefinedElectricityTypeName(ElectricityTypeName)
        md.elecEmissionType.setCurrentText(ElectricityTypePredefinedName)

        md.checkBoxNokianMyllyCO2Zeroed.setChecked(True if QSettings().value("/YKRTool/NokianMyllyCO2Zeroed", "True", type=str).lower() == 'true' else False)
        md.checkBoxCalculateEmissionsPerPerson.setChecked(True if QSettings().value("/YKRTool/CalculateEmissionsPerPerson", "True", type=str).lower() == 'true' else False)
        md.checkBoxCalculateEmissionsPerJob.setChecked(True if QSettings().value("/YKRTool/CalculateEmissionsPerJob", "True", type=str).lower() == 'true' else False)
        md.checkBoxCalculateEmissionsPerFloorSpaceSquares.setChecked(True if QSettings().value("/YKRTool/CalculateEmissionsPerFloorSpaceSquares", "True", type=str).lower() == 'true' else False)
        md.checkBoxVisualizeTrafficEmissions.setChecked(True if QSettings().value("/YKRTool/VisualizeTrafficEmissions", "True", type=str).lower() == 'true' else False)
        md.checkBoxVisualizeThermoEmissions.setChecked(True if QSettings().value("/YKRTool/VisualizeThermoEmissions", "False", type=str).lower() == 'true' else False)
        md.checkBoxVisualizeElectricityConsumptionEmissions.setChecked(True if QSettings().value("/YKRTool/VisualizeElectricityConsumptionEmissions", "False", type=str).lower() == 'true' else False)
        md.checkBoxVisualizePopJobMix.setChecked(True if QSettings().value("/YKRTool/VisualizePopJobMix", "True", type=str).lower() == 'true' else False)
        md.checkBoxVisualizeGoodZonesForPopJobDensityAndSustainableTransport.setChecked(True if QSettings().value("/YKRTool/VisualizeGoodZonesForPopJobDensityAndSustainableTransport", "True", type=str).lower() == 'true' else False)
        md.checkBoxVisualizeFloorSpaceRatio.setChecked(True if QSettings().value("/YKRTool/VisualizeFloorSpaceRatio", "True", type=str).lower() == 'true' else False)

        md.checkBoxCreateYKRZoneSummaryStats.setChecked(True if QSettings().value("/YKRTool/CreateYKRZoneSummaryStats", "True", type=str).lower() == 'true' else False)

        md.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.setChecked(True if QSettings().value("/YKRTool/AddQuickchartIoLinksOfRelativeEmissionsByZone", "False", type=str).lower() == 'true' else False)
        md.checkBoxAddQuickchartIoLinksOfZoneSquaresAndPopJobPercentagesOfTotalByZone.setChecked(True if QSettings().value("/YKRTool/AddQuickchartIoLinksOfZoneSquaresAndPopJobPercentagesOfTotalByZone", "False", type=str).lower() == 'true' else False)


    def saveCalculationSettings(self):
        md = self.mainDialog

        #
        #
        #

        QSettings().setValue("/YKRTool/nameOfTheCO2EstimationRun", md.lineEditNameOfTheCO2EstimationRun.text())

        QSettings().setValue("/YKRTool/useMapLayerForInvestigatedArea", 'True' if md.radioButtonUseMapLayerForInvestigatedArea.isChecked() else 'False')
        currentLayer = md.comboBoxMapLayer.currentLayer()
        if currentLayer != None:
            QSettings().setValue("/YKRTool/mapLayerIdForInvestigatedArea", md.comboBoxMapLayer.currentLayer().id())
            QSettings().setValue("/YKRTool/mapLayerNameForInvestigatedArea", md.comboBoxMapLayer.currentLayer().name())
        QSettings().setValue("/YKRTool/predefinedAreaDatabaseTableName", self.ykrToolDictionaries.getPredefinedAreaDatabaseTableName(md.comboBoxPredefinedArea.currentText()))

        QSettings().setValue("/YKRTool/chosenMunicipalitiesKangasala", 'True' if md.checkBoxMunicipalitiesKangasala.isChecked() else 'False')
        QSettings().setValue("/YKRTool/chosenMunicipalitiesLempaala", 'True' if md.checkBoxMunicipalitiesLempaala.isChecked() else 'False')
        QSettings().setValue("/YKRTool/chosenMunicipalitiesNokia", 'True' if md.checkBoxMunicipalitiesNokia.isChecked() else 'False')
        QSettings().setValue("/YKRTool/chosenMunicipalitiesOrivesi", 'True' if md.checkBoxMunicipalitiesOrivesi.isChecked() else 'False')
        QSettings().setValue("/YKRTool/chosenMunicipalitiesPirkkala", 'True' if md.checkBoxMunicipalitiesPirkkala.isChecked() else 'False')
        QSettings().setValue("/YKRTool/chosenMunicipalitiesTampere", 'True' if md.checkBoxMunicipalitiesTampere.isChecked() else 'False')
        QSettings().setValue("/YKRTool/chosenMunicipalitiesVesilahti", 'True' if md.checkBoxMunicipalitiesVesilahti.isChecked() else 'False')
        QSettings().setValue("/YKRTool/chosenMunicipalitiesYlojarvi", 'True' if md.checkBoxMunicipalitiesYlojarvi.isChecked() else 'False')

        #
        # Future emissions
        #

        QSettings().setValue("/YKRTool/shouldCalculateFuture", 'True' if md.checkBoxCalculateFuture.isChecked() else 'False')

        QSettings().setValue("/YKRTool/predefinedFutureAreaDBTableName", md.comboBoxPredefinedFutureAreas.currentText())
        QSettings().setValue("/YKRTool/predefinedFutureNetworkDBTableName", md.comboBoxPredefinedFutureNetwork.currentText())
        QSettings().setValue("/YKRTool/predefinedFutureStopsDBTableName", md.comboBoxPredefinedFutureStops.currentText())

        QSettings().setValue("/YKRTool/futureAreasLoadLayer", 'True' if md.futureAreasLoadLayer.isChecked() else 'False')
        QSettings().setValue("/YKRTool/futureNetworkLoadLayer", 'True' if md.futureNetworkLoadLayer.isChecked() else 'False')
        QSettings().setValue("/YKRTool/futureStopsLoadLayer", 'True' if md.futureStopsLoadLayer.isChecked() else 'False')

        futureAreasLayer = md.futureAreasLayerList.currentLayer()
        if futureAreasLayer != None:
            QSettings().setValue("/YKRTool/mapLayerIdForfutureAreasLoadLayer", futureAreasLayer.id())
            QSettings().setValue("/YKRTool/mapLayerNameForfutureAreasLoadLayer", futureAreasLayer.name())
        futureNetworkLayer = md.futureNetworkLayerList.currentLayer()
        if futureNetworkLayer != None:
            QSettings().setValue("/YKRTool/mapLayerIdForfutureNetworkLoadLayer", futureNetworkLayer.id())
            QSettings().setValue("/YKRTool/mapLayerNameForfutureNetworkLoadLayer", futureNetworkLayer.name())
        futureStopsLayer = md.futureStopsLayerList.currentLayer()
        if futureStopsLayer != None:
            QSettings().setValue("/YKRTool/mapLayerIdForfutureStopsLoadLayer", futureStopsLayer.id())
            QSettings().setValue("/YKRTool/mapLayerNameForfutureStopsLoadLayer", futureStopsLayer.name())

        QSettings().setValue("/YKRTool/targetYear",  md.targetYear.value())

        #
        # Advanced settings
        #

        QSettings().setValue("/YKRTool/IncludeLongDistance", 'True' if md.checkBoxIncludeLongDistance.isChecked() else 'False')
        QSettings().setValue("/YKRTool/IncludeBusinessTravel", 'True' if md.checkBoxIncludeBusinessTravel.isChecked() else 'False')

        QSettings().setValue("/YKRTool/emissionsAllocationName", self.ykrToolDictionaries.getEmissionAllocationMethodShortName(md.emissionsAllocation.currentText()))
        QSettings().setValue("/YKRTool/ElectricityTypeName", self.ykrToolDictionaries.getElectricityTypeShortName(md.elecEmissionType.currentText()))

        QSettings().setValue("/YKRTool/NokianMyllyCO2Zeroed", 'True' if md.checkBoxNokianMyllyCO2Zeroed.isChecked() else 'False')
        QSettings().setValue("/YKRTool/CalculateEmissionsPerPerson", 'True' if md.checkBoxCalculateEmissionsPerPerson.isChecked() else 'False')
        QSettings().setValue("/YKRTool/CalculateEmissionsPerJob", 'True' if md.checkBoxCalculateEmissionsPerJob.isChecked() else 'False')
        QSettings().setValue("/YKRTool/CalculateEmissionsPerFloorSpaceSquares", 'True' if md.checkBoxCalculateEmissionsPerFloorSpaceSquares.isChecked() else 'False')
        QSettings().setValue("/YKRTool/VisualizeTrafficEmissions", 'True' if md.checkBoxVisualizeTrafficEmissions.isChecked() else 'False')
        QSettings().setValue("/YKRTool/VisualizeThermoEmissions", 'True' if md.checkBoxVisualizeThermoEmissions.isChecked() else 'False')
        QSettings().setValue("/YKRTool/VisualizeElectricityConsumptionEmissions", 'True' if md.checkBoxVisualizeElectricityConsumptionEmissions.isChecked() else 'False')
        QSettings().setValue("/YKRTool/VisualizePopJobMix", 'True' if md.checkBoxVisualizePopJobMix.isChecked() else 'False')
        QSettings().setValue("/YKRTool/VisualizeGoodZonesForPopJobDensityAndSustainableTransport", 'True' if md.checkBoxVisualizeGoodZonesForPopJobDensityAndSustainableTransport.isChecked() else 'False')
        QSettings().setValue("/YKRTool/VisualizeFloorSpaceRatio", 'True' if md.checkBoxVisualizeFloorSpaceRatio.isChecked() else 'False')
        QSettings().setValue("/YKRTool/CreateYKRZoneSummaryStats", 'True' if md.checkBoxCreateYKRZoneSummaryStats.isChecked() else 'False')
        QSettings().setValue("/YKRTool/AddQuickchartIoLinksOfRelativeEmissionsByZone", 'True' if md.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.isChecked() else 'False')
        QSettings().setValue("/YKRTool/AddQuickchartIoLinksOfZoneSquaresAndPopJobPercentagesOfTotalByZone", 'True' if md.checkBoxAddQuickchartIoLinksOfZoneSquaresAndPopJobPercentagesOfTotalByZone.isChecked() else 'False')


    def handleAddQuickchartIoLinksOfRelativeEmissionsByZoneToggle(self, checked):
        if checked:
            self.mainDialog.checkBoxCalculateEmissionsPerPerson.setChecked(True)
            self.mainDialog.checkBoxCalculateEmissionsPerJob.setChecked(True)
            self.mainDialog.checkBoxCalculateEmissionsPerFloorSpaceSquares.setChecked(True)
            self.mainDialog.checkBoxVisualizeTrafficEmissions.setChecked(True)
        else:
            pass


    def handleVisualizeTrafficEmissionsToggle(self, checked):
        if checked:
            pass
        else:
            self.mainDialog.checkBoxVisualizeSustainableUrbanStructure.setChecked(False)
            self.mainDialog.checkBoxAllowOtherUsersToUseSustainableUrbanStructureTable.setEnabled(False)
            self.mainDialog.mMapLayerComboBoxYKRCarOwnershipData.setEnabled(False)
            self.mainDialog.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.setChecked(False)


    def handleVisualizeSustainableUrbanStructureToggle(self, checked):
        if checked:
            self.mainDialog.mMapLayerComboBoxYKRCarOwnershipData.setEnabled(True)
            self.mainDialog.checkBoxVisualizeTrafficEmissions.setChecked(True)
            self.mainDialog.checkBoxAllowOtherUsersToUseSustainableUrbanStructureTable.setEnabled(True)
        else:
            self.mainDialog.mMapLayerComboBoxYKRCarOwnershipData.setEnabled(False)
            self.mainDialog.checkBoxAllowOtherUsersToUseSustainableUrbanStructureTable.setEnabled(False)


    def handleCalculateEmissionsPerPersonToggle(self, checked):
        if checked:
            pass
        else:
            self.mainDialog.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.setChecked(False)
            # self.mainDialog.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.setEnabled(False)

        # if checked:
        #     md.comboBoxYkrPop.setEnabled(True)
        #     md.mapLayerComboBoxYkrPop.setEnabled(True)
        #     md.checkBoxLoadYkrPopFromMapLayer.setEnabled(True)
        # else:
        #     md.comboBoxYkrPop.setEnabled(False)
        #     md.mapLayerComboBoxYkrPop.setEnabled(False)
        #     md.checkBoxLoadYkrPopFromMapLayer.setEnabled(False)


    def handleCalculateEmissionsPerJobToggle(self, checked):
        if checked:
            pass
        else:
            self.mainDialog.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.setChecked(False)

        # if checked:
        #     md.comboBoxYkrJob.setEnabled(True)
        #     md.mapLayerComboBoxYkrJob.setEnabled(True)
        #     md.checkBoxLoadYkrJobFromMapLayer.setEnabled(True)
        # else:
        #     md.comboBoxYkrJob.setEnabled(False)
        #     md.mapLayerComboBoxYkrJob.setEnabled(False)
        #     md.checkBoxLoadYkrJobFromMapLayer.setEnabled(False)


    def handleCalculateEmissionsPerFloorSpaceSquaresToggle(self, checked):
        if checked:
            pass
        else:
            self.mainDialog.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.setChecked(False)


    def handleRadioButtonUseMapLayerForInvestigatedAreaToggle(self, checked):
        md = self.mainDialog

        if checked:
            md.comboBoxMapLayer.setEnabled(True)
            md.mapLayerLabel.setEnabled(True)
            # md.checkBoxAllowOtherUsersToUseUploadedMapLayer.setEnabled(True)
            # md.checkBoxUploadOnlySelectedFeatures.setEnabled(True)
            md.comboBoxPredefinedArea.setEnabled(False)
            md.predefinedAreaLabel.setEnabled(False)
        else:
            md.comboBoxMapLayer.setEnabled(False)
            md.mapLayerLabel.setEnabled(False)
            # md.checkBoxAllowOtherUsersToUseUploadedMapLayer.setEnabled(False)
            # md.checkBoxUploadOnlySelectedFeatures.setEnabled(False)
            md.comboBoxPredefinedArea.setEnabled(True)
            md.predefinedAreaLabel.setEnabled(True)


    def handleRadioButtonUsePredefinedAreaForInvestigatedAreaToggle(self, checked):
        md = self.mainDialog

        if checked:
            md.comboBoxMapLayer.setEnabled(False)
            md.mapLayerLabel.setEnabled(False)
            # md.checkBoxAllowOtherUsersToUseUploadedMapLayer.setEnabled(False)
            # md.checkBoxUploadOnlySelectedFeatures.setEnabled(False)
            md.comboBoxPredefinedArea.setEnabled(True)
            md.predefinedAreaLabel.setEnabled(True)
        else:
            md.comboBoxMapLayer.setEnabled(True)
            md.mapLayerLabel.setEnabled(True)
            # md.checkBoxAllowOtherUsersToUseUploadedMapLayer.setEnabled(True)
            # md.checkBoxUploadOnlySelectedFeatures.setEnabled(True)
            md.comboBoxPredefinedArea.setEnabled(False)
            md.predefinedAreaLabel.setEnabled(False)


    def displayUserSettingsDialog(self):
        self.userSettingsDialog.show()

        self.userSettingsDialog.checkBoxLoadDatabaseConnectionSettingsAutomatically.setChecked(True if QSettings().value("/YKRTool/loadDatabaseConnectionSettingsAutomatically", "True", type=str).lower() == 'true' else False)
        self.userSettingsDialog.checkBoxRememberCalculationSettingsBetweenRuns.setChecked(True if QSettings().value("/YKRTool/rememberCalculationSettingsBetweenRuns", "True", type=str).lower() == 'true' else False)
        self.userSettingsDialog.checkBoxRememberCalculationSettingsExitingQGIS.setChecked(True if QSettings().value("/YKRTool/rememberCalculationSettingsExitingQGIS", "True", type=str).lower() == 'true' else False)

        result = self.userSettingsDialog.exec_()
        if result:
            self.handleUserSettingsDialogData()


    def handleUserSettingsDialogData(self):
        self.loadDatabaseConnectionSettingsAutomatically = True if self.userSettingsDialog.checkBoxLoadDatabaseConnectionSettingsAutomatically.isChecked() else False
        QSettings().setValue("/YKRTool/loadDatabaseConnectionSettingsAutomatically", 'True' if self.loadDatabaseConnectionSettingsAutomatically else 'False')

        self.rememberCalculationSettingsBetweenRuns = True if self.userSettingsDialog.checkBoxRememberCalculationSettingsBetweenRuns.isChecked() else False
        QSettings().setValue("/YKRTool/rememberCalculationSettingsBetweenRuns", 'True' if self.rememberCalculationSettingsBetweenRuns else 'False')

        self.rememberCalculationSettingsExitingQGIS = True if self.userSettingsDialog.checkBoxRememberCalculationSettingsExitingQGIS.isChecked() else False
        QSettings().setValue("/YKRTool/rememberCalculationSettingsExitingQGIS", 'True' if self.rememberCalculationSettingsExitingQGIS else 'False')
        
        if self.rememberCalculationSettingsExitingQGIS:
            self.saveCalculationSettings()


    def displayDatabaseSettingsDialog(self):
        '''Sets up and displays the settings dialog'''
        self.databaseSettingsDialog.show()
        self.databaseSettingsDialog.configFileInput.setStorageMode(QgsFileWidget.GetFile)
        configFilePath = QSettings().value("/YKRTool/configFilePath", "", type=str)
        self.databaseSettingsDialog.configFileInput.setFilePath(configFilePath)
        
        if self.loadDatabaseConnectionSettingsAutomatically:
            if configFilePath != "":
                self.setConnectionParamsFromFile()
                self.ykrZonesStats.setConnectionParams(self.connParams)

        self.databaseSettingsDialog.loadFileButton.clicked.connect(self.setConnectionParamsFromFile)

        result = self.databaseSettingsDialog.exec_()
        if result:
            self.connParams = self.readConnectionParamsFromInput()
            self.ykrZonesStats.setConnectionParams(self.connParams)


    def setConnectionParamsFromFile(self):
        '''Reads connection parameters from file and sets them to the input fields'''
        filePath = self.databaseSettingsDialog.configFileInput.filePath()
        QSettings().setValue("/YKRTool/configFilePath", filePath)

        try:
            dbParams = self.parseConfigFile(filePath)
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in reading a file'),\
                str(e), Qgis.Warning, duration=10)

        self.setConnectionParamsFromInput(dbParams)


    def parseConfigFile(self, filePath):
        '''Reads configuration file and returns parameters as a dict'''
        # Setup an empty dict with correct keys to avoid keyerrors
        dbParams = {
            'host': '',
            'port': '',
            'database': '',
            'user': '',
            'password': ''
        }
        if not os.path.exists(filePath):
            self.iface.messageBar().pushMessage(self.tr('Error'), self.tr('File could not be read'),\
                Qgis.Warning)
            return dbParams

        parser = ConfigParser()
        parser.read(filePath)
        if parser.has_section('postgresql'):
            params = parser.items('postgresql')
            for param in params:
                dbParams[param[0]] = param[1]
        else:
            self.iface.messageBar().pushMessage(self.tr('Error'), self.tr('File does not contain database connection parameters'), Qgis.Warning)

        return dbParams

    def setConnectionParamsFromInput(self, params):
        '''Sets connection parameters to input fields'''
        self.databaseSettingsDialog.dbHost.setValue(params['host'])
        self.databaseSettingsDialog.dbPort.setValue(params['port'])
        self.databaseSettingsDialog.dbName.setValue(params['database'])
        self.databaseSettingsDialog.dbUser.setValue(params['user'])
        self.databaseSettingsDialog.dbPass.setText(params['password'])

    def readConnectionParamsFromInput(self):
        '''Reads connection parameters from user input and returns a dictionary'''
        params = {}
        params['host'] = self.databaseSettingsDialog.dbHost.value()
        params['port'] = self.databaseSettingsDialog.dbPort.value()
        params['database'] = self.databaseSettingsDialog.dbName.value()
        params['user'] = self.databaseSettingsDialog.dbUser.value()
        params['password'] = self.databaseSettingsDialog.dbPass.text()
        return params


    # def handlePopLayerToggle(self):
    #     '''Toggle UI components visibility based on selection'''
    #     if self.mainDialog.checkBoxLoadYkrPopFromMapLayer.isChecked():
    #         self.mainDialog.comboBoxYkrPop.hide()
    #         self.mainDialog.mapLayerComboBoxYkrPop.setEnabled(True)
    #         self.mainDialog.checkBoxAllowOtherUsersToUseUploadedYKRPopLayer.setEnabled(True)
    #         self.mainDialog.mapLayerComboBoxYkrPop.show()
    #     else:
    #         self.mainDialog.comboBoxYkrPop.show()
    #         self.mainDialog.mapLayerComboBoxYkrPop.setEnabled(False)
    #         self.mainDialog.checkBoxAllowOtherUsersToUseUploadedYKRJobLayer.setEnabled(False)
    #         self.mainDialog.mapLayerComboBoxYkrPop.hide()


    # def handleJobLayerToggle(self):
    #     '''Toggle UI components visibility based on selection'''
    #     if self.mainDialog.checkBoxLoadYkrJobFromMapLayer.isChecked():
    #         self.mainDialog.comboBoxYkrJob.hide()
    #         self.mainDialog.mapLayerComboBoxYkrJob.setEnabled(True)
    #         self.mainDialog.checkBoxAllowOtherUsersToUseUploadedYKRJobLayer.setEnabled(True)
    #         self.mainDialog.mapLayerComboBoxYkrJob.show()
    #     else:
    #         self.mainDialog.comboBoxYkrJob.show()
    #         self.mainDialog.mapLayerComboBoxYkrJob.setEnabled(False)
    #         self.mainDialog.checkBoxAllowOtherUsersToUseUploadedYKRJobLayer.setEnabled(False)
    #         self.mainDialog.mapLayerComboBoxYkrJob.hide()


    def handleLayerToggle(self):
        '''Toggle UI components visibility based on selection'''
        # if self.mainDialog.ykrBuildingsLoadLayer.isChecked():
        #     self.mainDialog.ykrBuildingsLayerList.show()
        #     self.mainDialog.ykrBuildingsFile.hide()
        # else:
        #     self.mainDialog.ykrBuildingsLayerList.hide()
        #     self.mainDialog.ykrBuildingsFile.show()
        if self.mainDialog.futureAreasLoadLayer.isChecked():
            self.mainDialog.futureAreasLayerList.show()
            self.mainDialog.comboBoxPredefinedFutureAreas.hide()
        else:
            self.mainDialog.futureAreasLayerList.hide()
            self.mainDialog.comboBoxPredefinedFutureAreas.show()

        if self.mainDialog.futureNetworkLoadLayer.isChecked():
            self.mainDialog.futureNetworkLayerList.show()
            self.mainDialog.comboBoxPredefinedFutureNetwork.hide()
        else:
            self.mainDialog.futureNetworkLayerList.hide()
            self.mainDialog.comboBoxPredefinedFutureNetwork.show()

        if self.mainDialog.futureStopsLoadLayer.isChecked():
            self.mainDialog.futureStopsLayerList.show()
            self.mainDialog.comboBoxPredefinedFutureStops.hide()
        else:
            self.mainDialog.futureStopsLayerList.hide()
            self.mainDialog.comboBoxPredefinedFutureStops.show()

        if self.mainDialog.checkBoxCalculateFuture.isChecked():
            self.mainDialog.futureBox.setEnabled(True)
            self.mainDialog.futureRequired.setEnabled(True)
            self.mainDialog.futureOptional.setEnabled(True)
            self.mainDialog.comboBoxPredefinedFutureAreas.setEnabled(True)
            self.mainDialog.futureAreasLayerList.setEnabled(True)
            self.mainDialog.comboBoxPredefinedFutureNetwork.setEnabled(True)
            self.mainDialog.futureNetworkLayerList.setEnabled(True)
            self.mainDialog.comboBoxPredefinedFutureStops.setEnabled(True)
            self.mainDialog.futureStopsLayerList.setEnabled(True)
        else:
            self.mainDialog.futureBox.setEnabled(False)
            self.mainDialog.futureRequired.setEnabled(False)
            self.mainDialog.futureOptional.setEnabled(False)
            self.mainDialog.comboBoxPredefinedFutureAreas.setEnabled(False)
            self.mainDialog.futureAreasLayerList.setEnabled(False)
            self.mainDialog.comboBoxPredefinedFutureNetwork.setEnabled(False)
            self.mainDialog.futureNetworkLayerList.setEnabled(False)
            self.mainDialog.comboBoxPredefinedFutureStops.setEnabled(False)
            self.mainDialog.futureStopsLayerList.setEnabled(False)


    def generateSessionParameters(self):
        '''Get necessary values for processing session'''
        sessionParams = {}

        usr = getpass.getuser()
        sessionParams["user"] = usr.replace(" ", "_")
        now = datetime.datetime.now()
        sessionParams["startTime"] = now.strftime("%Y%m%d_%H%M%S")
        sessionParams["baseYear"] = now.year
        sessionParams["uuid"] = str(uuid.uuid4())

        return sessionParams


    def readProcessingInput(self):
        '''Read user input from main dialog'''
        md = self.mainDialog

        self.NameOfTheCO2EstimationRun = md.lineEditNameOfTheCO2EstimationRun.text()

        self.inputLayers = []

        if md.radioButtonUseMapLayerForInvestigatedArea.isChecked():
            self.predefinedAreaDBTableName = None
            self.investigatedAreaMapLayer = md.comboBoxMapLayer.currentLayer()
            if self.investigatedAreaMapLayer == None:
                raise Exception(self.tr("Investigation area map layer has not been selected"))
            elif not self.investigatedAreaMapLayer.isValid():
                raise Exception(self.tr("Investigation area map layer is not valid"))
            dataProvider = self.investigatedAreaMapLayer.dataProvider()
            dataSourceUri = dataProvider.dataSourceUri()
            # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
            uri = dataProvider.uri()
            # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
            # QgsMessageLog.logMessage("host: {}".format(uri.host()) , 'YKRTool', Qgis.Info)
            # if uri.host() == "":
                # QgsMessageLog.logMessage("host = \"\"", 'YKRTool', Qgis.Info)
            # QgsMessageLog.logMessage("database: {}".format(uri.database()) , 'YKRTool', Qgis.Info)
            # if uri.database() == "":
                # QgsMessageLog.logMessage("database = \"\"", 'YKRTool', Qgis.Info)
            if uri.host() == "" or uri.host() != self.connParams['host'] or uri.database() == "" or uri.database() != self.connParams['database']:
                self.predefinedAreaDBTableName = 'user_input.' + '"' + self.investigatedAreaMapLayer.name()[:YKRTool.MAX_TABLE_NAME_LENGTH] + '"'
                self.ykrToolUploadLayer.copySourceLayerFeaturesToTargetTable(self.connParams, self.investigatedAreaMapLayer, self.predefinedAreaDBTableName, md.checkBoxAllowOtherUsersToUseUploadedMapLayer.isChecked(), md.checkBoxUploadOnlySelectedFeatures.isChecked())
            else:
                self.investigatedAreaMapLayer = None
                QgsMessageLog.logMessage("schema: {}".format(uri.schema()) , 'YKRTool', Qgis.Info)
                QgsMessageLog.logMessage("quotedTablename: {}".format(uri.quotedTablename()) , 'YKRTool', Qgis.Info)
                self.predefinedAreaDBTableName = uri.quotedTablename()
        else:
            self.investigatedAreaMapLayer = None
            self.predefinedAreaDBTableName = self.ykrToolDictionaries.getPredefinedAreaDatabaseTableName(md.comboBoxPredefinedArea.currentText())

        self.municipalitiesArrayString = self.createMunicipalitiesArrayString()

        # self.onlySelectedFeats = md.checkBoxUploadOnlySelectedFeatures.isChecked()
        self.pitkoScenario = self.ykrToolDictionaries.getPITKOScenarioShortName(md.pitkoScenario.currentText())

        self.includeLongDistance = md.checkBoxIncludeLongDistance.isChecked()
        self.includeBusinessTravel = md.checkBoxIncludeBusinessTravel.isChecked()

        # 'includeLongDistance': 'true' if self.includeLongDistance else 'false',
        # 'includeBusinessTravel': 'true' if self.includeBusinessTravel else 'false',

        self.emissionsAllocation = self.ykrToolDictionaries.getEmissionAllocationMethodShortName(md.emissionsAllocation.currentText())
        self.elecEmissionType = self.ykrToolDictionaries.getElectricityTypeShortName(md.elecEmissionType.currentText())

        if not md.checkBoxCalculateFuture.isChecked():
            self.calculateFuture = False
        else:
            self.readFutureProcessingInput()

        # self.uploadInputLayers()
        # QgsMessageLog.logMessage("predefinedAreaDBTableName: {}".format(self.predefinedAreaDBTableName), 'YKRTool', Qgis.Info)

        self.runCalculation()



    def readFutureProcessingInput(self):
        '''Reads user input for future processing from main dialog'''
        self.calculateFuture = True
        md = self.mainDialog

        if md.futureAreasLoadLayer.isChecked():
            self.futureAreasLayer = md.futureAreasLayerList.currentLayer()
            self.futureZoningAreasTableName = 'user_input.' + '"' + self.futureAreasLayer.name()[:YKRTool.MAX_TABLE_NAME_LENGTH] + '"'
        else:
            self.futureZoningAreasTableName = self.ykrToolDictionaries.getPredefinedFutureZoningAreasDatabaseTableName(md.comboBoxPredefinedFutureAreas.currentText())
            schemaName, tableName = self.futureZoningAreasTableName.split('.')
            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
                self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(schemaName, tableName, 'geom')
            self.futureAreasLayer = QgsVectorLayer(uri.uri(False), "aluevaraus_tulevaisuus", 'postgres')
            # QgsMessageLog.logMessage("futureAreasLayer: " +  str(self.futureAreasLayer), 'YKRTool', Qgis.Info)

        self.inputLayers.append(self.futureAreasLayer)

        if md.futureNetworkLoadLayer.isChecked():
            self.futureNetworkLayer = md.futureNetworkLayerList.currentLayer()
            if self.futureNetworkLayer == None:
                raise Exception(self.tr("Future urban center map layer has not been selected"))
            elif not self.futureNetworkLayer.isValid():
                raise Exception(self.tr("Future urban center map layer is not valid"))
            else:
                dataProvider = self.futureNetworkLayer.dataProvider()
                dataSourceUri = dataProvider.dataSourceUri()
                # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
                uri = dataProvider.uri()
                # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
                # QgsMessageLog.logMessage("host: {}".format(uri.host()) , 'YKRTool', Qgis.Info)
                # if uri.host() == "":
                    # QgsMessageLog.logMessage("host = \"\"", 'YKRTool', Qgis.Info)
                # QgsMessageLog.logMessage("database: {}".format(uri.database()) , 'YKRTool', Qgis.Info)
                # if uri.database() == "":
                # QgsMessageLog.logMessage("database = \"\"", 'YKRTool', Qgis.Info)
                if uri.host() == "" or uri.host() != self.connParams['host'] or uri.database() == "" or uri.database() != self.connParams['database']:
                    self.futureNetworkLayerDBTableName = 'user_input.' + '"' + self.futureNetworkLayer.name()[:YKRTool.MAX_TABLE_NAME_LENGTH] + '"'
                    self.ykrToolUploadLayer.copyFutureNetworkSourceLayerFeaturesToTargetTable(self.connParams, self.futureNetworkLayer, self.futureNetworkLayerDBTableName)
                else:
                    self.futureNetworkLayer = None
                    QgsMessageLog.logMessage("schema: {}".format(uri.schema()) , 'YKRTool', Qgis.Info)
                    QgsMessageLog.logMessage("quotedTablename: {}".format(uri.quotedTablename()) , 'YKRTool', Qgis.Info)
                    self.futureNetworkLayerDBTableName = uri.quotedTablename()
            # self.inputLayers.append(self.futureNetworkLayer)
        else:
            self.futureNetworkLayerDBTableName = self.ykrToolDictionaries.getPredefinedUrbanCenterLayersDatabaseTableName(md.comboBoxPredefinedFutureNetwork.currentText())
            schemaName, tableName = self.futureNetworkLayerDBTableName.split('.')
            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(schemaName, tableName, 'geom')
            self.futureNetworkLayer = QgsVectorLayer(uri.uri(False), "keskusverkko_tulevaisuus", 'postgres')

        if md.futureStopsLoadLayer.isChecked():
            self.futureStopsLayer = md.futureStopsLayerList.currentLayer()
            # self.inputLayers.append(self.futureStopsLayer)
            if self.futureStopsLayer == None:
                raise Exception(self.tr("Future public transit stops map layer has not been selected"))
            elif not self.futureStopsLayer.isValid():
                raise Exception(self.tr("Future public transit stops map layer is not valid"))
            else:
                dataProvider = self.futureStopsLayer.dataProvider()
                dataSourceUri = dataProvider.dataSourceUri()
                # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
                uri = dataProvider.uri()
                # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
                # QgsMessageLog.logMessage("host: {}".format(uri.host()) , 'YKRTool', Qgis.Info)
                # if uri.host() == "":
                    # QgsMessageLog.logMessage("host = \"\"", 'YKRTool', Qgis.Info)
                # QgsMessageLog.logMessage("database: {}".format(uri.database()) , 'YKRTool', Qgis.Info)
                # if uri.database() == "":
                # QgsMessageLog.logMessage("database = \"\"", 'YKRTool', Qgis.Info)
                if uri.host() == "" or uri.host() != self.connParams['host'] or uri.database() == "" or uri.database() != self.connParams['database']:
                    self.futureStopsLayerDBTableName = 'user_input.' + '"' + self.futureStopsLayer.name()[:YKRTool.MAX_TABLE_NAME_LENGTH] + '"'
                    self.ykrToolUploadLayer.copyFutureStopsSourceLayerFeaturesToTargetTable(self.connParams, self.futureStopsLayer, self.futureStopsLayerDBTableName)
                else:
                    self.futureStopsLayer = None
                    QgsMessageLog.logMessage("schema: {}".format(uri.schema()) , 'YKRTool', Qgis.Info)
                    QgsMessageLog.logMessage("quotedTablename: {}".format(uri.quotedTablename()) , 'YKRTool', Qgis.Info)
                    self.futureStopsLayerDBTableName = uri.quotedTablename()
        else:
            self.futureStopsLayerDBTableName = self.ykrToolDictionaries.getPredefinedFuturePublicTransportStopsDatabaseTableName(md.comboBoxPredefinedFutureStops.currentText())
            schemaName, tableName = self.futureStopsLayerDBTableName.split('.')
            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(schemaName, tableName, 'geom')
            self.futureStopsLayer = QgsVectorLayer(uri.uri(False), "pysakkiverkko_tulevaisuus", 'postgres')

        self.targetYear = md.targetYear.value()


    def checkLayerValidity(self):
        '''Checks that necessary layers are valid and raise an exception if needed'''
        # if not self.ykrPopLayer.isValid():
        #     raise Exception("Virhe ladattaessa nykytilanteen YKR-väestötasoa")
        # if not self.ykrBuildingsLayer.isValid():
        #     raise Exception("Virhe ladattaessa nykytilanteen YKR-rakennustasoa")
        # if not self.ykrJobsLayer.isValid():
        #     raise Exception("Virhe ladattaessa nykytilanteen YKR-työpaikkatasoa")
        if self.calculateFuture:
            self.checkFutureLayerValidity()


    def checkFutureLayerValidity(self):
        '''Checks if future calculation input layers are valid'''
        if not self.futureAreasLayer.isValid():
            raise Exception(self.tr("Future zoning areas layer is not valid"))
        if self.futureNetworkLayer:
            if self.futureNetworkLayer != None and not self.futureNetworkLayer.isValid():
                raise Exception(self.tr("Urban center layer is not valid"))
        if self.futureStopsLayer:
            if self.futureStopsLayer != None and not self.futureStopsLayer.isValid():
                raise Exception(self.tr("Public transit stops layer is not valid"))


    # def uploadSingleMapLayer(self, layer):
    #     '''Uploads a single input layer to database'''
    #     alg = QgsApplication.processingRegistry().algorithmById(
    #         'gdal:importvectorintopostgisdatabasenewconnection')
    #     params = {
    #         'A_SRS': QgsCoordinateReferenceSystem('EPSG:3067'),
    #         'T_SRS': None,
    #         'S_SRS': None,
    #         'HOST': self.connParams['host'],
    #         'PORT': self.connParams['port'],
    #         'USER': self.connParams['user'],
    #         'DBNAME': self.connParams['database'],
    #         'PASSWORD': self.connParams['password'],
    #         'SCHEMA': 'user_input',
    #         'PK': 'fid',
    #         'PRIMARY_KEY': None,
    #         'PROMOTETOMULTI': False
    #     }
    #     context = QgsProcessingContext()
    #     feedback = QgsProcessingFeedback()
    #     params['INPUT'] = layer
    #     tableName = layer.name()
    #     params['TABLE'] = tableName[:YKRTool.MAX_TABLE_NAME_LENGTH] # truncate tablename to under 63c
    #     self.tableNames[layer] = params['TABLE']
    #     if int(str(layer.wkbType())[:1]) == 3: # polygon
    #         params['GTYPE'] = 5
    #     elif int(str(layer.wkbType())[:1]) == 6: # MultiPolygon
    #         params['GTYPE'] = 8
    #     task = QgsProcessingAlgRunnerTask(alg, params, context, feedback)
    #     task.executed.connect(partial(self.uploadSingleMapLayerFinished, context))
    #     QgsApplication.taskManager().addTask(task)
    #     self.iface.messageBar().pushMessage('Ladataan tasoa tietokantaan',
    #         layer.name(), Qgis.Info, duration=3)


    # def uploadSingleMapLayerFinished(self, context, successful, results):
    #     if not successful:
    #         self.iface.messageBar().pushMessage('Virhe',
    #         'Virhe ladattaessa tasoa tietokantaan', Qgis.Warning, duration=0)
    #     else:
    #         self.finishReadingProcessingInput()

    
    def uploadInputLayers(self):
        '''Write layers to database'''
        self.layerUploadIndex = 0
        self.uploadInputLayer()

    def uploadInputLayer(self):
        '''Uploads an input layer to database'''
        alg = QgsApplication.processingRegistry().algorithmById(
            'gdal:importvectorintopostgisdatabasenewconnection')
        params = {
            'A_SRS': QgsCoordinateReferenceSystem('EPSG:3067'),
            'T_SRS': None,
            'S_SRS': None,
            'HOST': self.connParams['host'],
            'PORT': self.connParams['port'],
            'USER': self.connParams['user'],
            'DBNAME': self.connParams['database'],
            'PASSWORD': self.connParams['password'],
            'SCHEMA': 'user_input',
            'PK': 'fid',
            'PRIMARY_KEY': None,
            'PROMOTETOMULTI': False
        }
        context = QgsProcessingContext()
        feedback = QgsProcessingFeedback()
        layer = self.inputLayers[self.layerUploadIndex]
        if not layer:
            self.tableNames[layer] = False
            self.uploadNextLayer()
        params['INPUT'] = layer
        tableName = self.sessionParams['uuid'] + '_' + layer.name()
        tableName = tableName.replace('-', '_')
        params['TABLE'] = tableName[:49] # truncate tablename to under 63c
        self.tableNames[layer] = params['TABLE']
        if layer.geometryType() == 0: # point
            params['GTYPE'] = 3
        elif layer.geometryType() == 2: # polygon
            params['GTYPE'] = 8
        task = QgsProcessingAlgRunnerTask(alg, params, context, feedback)
        task.executed.connect(partial(self.uploadFinished, context))
        QgsApplication.taskManager().addTask(task)
        self.iface.messageBar().pushMessage(self.tr('Loading layer to the database'),
            layer.name(), Qgis.Info, duration=3)

    def uploadFinished(self, context, successful, results):
        if not successful:
            self.iface.messageBar().pushMessage(self.tr('Error'),
            self.tr('Error in loading layer to the database'), Qgis.Warning, duration=0)
        self.uploadNextLayer()

    def uploadNextLayer(self):
        '''Uploads the next layer in the input layer list'''
        self.layerUploadIndex += 1
        if self.layerUploadIndex < len(self.inputLayers):
            self.uploadInputLayer()
        else:
            self.runCalculation()

    def runCalculation(self):
        '''Runs the main calculation'''
        try:
            queries = self.getCalculationQueries()
            queryTask = QueryTask(self.connParams, queries)
            queryTask.taskCompleted.connect(self.postCalculation)
            queryTask.taskTerminated.connect(self.postError)
            QgsApplication.taskManager().addTask(queryTask)
            self.iface.messageBar().pushMessage(self.tr('Emission calculation'),
                self.tr('Calculating emissions'), Qgis.Info, duration=15)
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in calculation'), str(e), Qgis.Critical, duration=0)
            self.cleanUpSession()
            return False


    def getOutputTableName(self):
        '''Returns the name of the output table'''
        outputTableName = 'o_'

        if self.connParams != None and self.connParams['user'] != None and self.connParams['user'] != '':
            outputTableName += self.connParams['user'][:13] + '_'
        else:
            usr_getpass = getpass.getuser()
            if usr_getpass != None and usr_getpass != '':
                usr_getpass = re.sub(r'\W+', '', usr_getpass)
    
                # Convert to lowercase
                usr_getpass = usr_getpass.lower()
                
                # Replace scandinavian characters
                usr_getpass = usr_getpass.replace('ä', 'a')
                usr_getpass = usr_getpass.replace('ö', 'o')
                usr_getpass = usr_getpass.replace('å', 'a')

                outputTableName += usr_getpass[:13] + '_'
            else:
                outputTableName += 'unknown_'

        #

        if self.NameOfTheCO2EstimationRun != None and self.NameOfTheCO2EstimationRun != '':
            table_name = re.sub(r'\W+', '', self.NameOfTheCO2EstimationRun)

            # Replace spaces with underscores
            table_name = table_name.replace(' ', '_')
        
            # Convert to lowercase
            table_name = table_name.lower()
            
            # Replace scandinavian characters
            table_name = table_name.replace('ä', 'a')
            table_name = table_name.replace('ö', 'o')
            table_name = table_name.replace('å', 'a')

            outputTableName += table_name[:11] + '_'

        outputTableName += self.sessionParams['uuid'].replace('-', '')
        
        return outputTableName


    def getCalculationQueries(self):
        '''Generate queries to call processing functions in database'''

        outputTableName = self.getOutputTableName()

        vals = {
            'municipalities': self.municipalitiesArrayString,
            'aoi': self.predefinedAreaDBTableName,
            'includeLongDistance': 'true' if self.includeLongDistance else 'false',
            'includeBusinessTravel': 'true' if self.includeBusinessTravel else 'false',
            # 'geomArea': self.geomArea,
            # 'popTable': (self.tableNames[self.ykrPopLayer]).lower(),
            # 'jobTable': (self.tableNames[self.ykrJobsLayer]).lower(),
            # 'buildingTable': (self.tableNames[self.ykrBuildingsLayer]).lower(),
            # 'calcYear': 2023, #self.sessionParams['baseYear'],
            'pitkoScenario': self.pitkoScenario,
            'emissionsAllocation': self.emissionsAllocation,
            'elecEmissionType': self.elecEmissionType,
            'baseYear': self.sessionParams['baseYear'],
            # 'targetYear': 2023, #self.sessionParams['baseYear'],
            'outputTableName': outputTableName
        }
        queries = []
        if not self.calculateFuture:
            # presentYearVals = {
            #     'calculationYears': 'array[{0}, {0}, {0}]'.format(self.sessionParams["baseYear"]),
            # }
            # vals.update(presentYearVals)
            
            query = '''CREATE TABLE user_output."{outputTableName}" AS SELECT * FROM CO2_CalculateEmissionsLoop({municipalities}, '{aoi}', {includeLongDistance}, {includeBusinessTravel}, '{pitkoScenario}', '{emissionsAllocation}', '{elecEmissionType}', '{baseYear}', '{baseYear}');'''.format(**vals)

            # query = '''CREATE TABLE user_output."output_{0}" AS SELECT * FROM CO2_CalculateEmissions(array{1}, '{2}', {3}, {4}, array{5}, '{6}', '{7}', '{8}', {9}, {10});'''.format(self.sessionParams['uuid'], [837], self.predefinedAreaDBTableName, 'false' ,'true', [2023, 2023, 2023], self.pitkoScenario, self.emissionsAllocation, self.elecEmissionType, 2023, 2023)

            # query = '''CREATE TABLE user_output."output_{uuid}" AS
            #     SELECT * FROM CO2_CalculateEmissions('{municipalities}', '{aoi}', '{includeLongDistance}', '{includeBusinessTravel}', '{calculationYears}', '{pitkoScenario}',
            #     '{emissionsAllocation}', '{elecEmissionType}', '{baseYear}', '{targetYear}')'''.format(**vals)
            QgsMessageLog.logMessage(query, 'YKRTool', Qgis.Info)
            queries.append(query)
            # queries.append('''CREATE TABLE user_output."output_{uuid}" AS
            # SELECT * FROM CO2_CalculateEmissions('{aoi}', '{calcYear}', '{pitkoScenario}',
            # '{emissionsAllocation}', '{elecEmissionType}')'''.format(**vals))
            # # queries.append('''CREATE TABLE user_output."output_{uuid}" AS
            # # SELECT * FROM il_calculate_emissions('{popTable}', '{jobTable}',
            # # '{buildingTable}', '{aoi}', '{calcYear}', '{pitkoScenario}',
            # # '{emissionsAllocation}', '{elecEmissionType}', '{geomArea}',
            # # '{baseYear}')'''.format(**vals))
            QgsMessageLog.logMessage("getCalculationQueries, not self.calculateFuture", 'YKRTool', Qgis.Info)
        else:
            futureQuery = self.generateFutureQuery(vals)
            queries.append(futureQuery)
        return queries


    def generateFutureQuery(self, vals):
        '''Constructs a query for future calculation'''
        futureZoningAreasTableName = self.futureZoningAreasTableName
        futureVals = {
            #'fAreas': (self.tableNames[self.futureAreasLayer]).lower(),
            'calculationYears': 'array[{0}, {0}, {1}]'.format(self.sessionParams["baseYear"], self.targetYear),
            'fAreas': futureZoningAreasTableName,
            'targetYear': self.targetYear
        }
        vals.update(futureVals)
        
        query = """CREATE TABLE user_output."{outputTableName}" AS
        SELECT * FROM CO2_CalculateEmissionsLoop({municipalities}, '{aoi}', {includeLongDistance}, {includeBusinessTravel}, '{pitkoScenario}', '{emissionsAllocation}', '{elecEmissionType}', '{baseYear}', '{targetYear}', '{fAreas}'""".format(**vals)
        # query = """CREATE TABLE user_output."output_dev_{uuid}" AS
        # SELECT * FROM CO2_CalculateEmissions({municipalities}, '{aoi}', {includeLongDistance}, {includeBusinessTravel}, {calculationYears}, '{pitkoScenario}', '{emissionsAllocation}', '{elecEmissionType}', '{baseYear}', '{targetYear}', '{fAreas}'""".format(**vals)

        # futureNetworkTableName = (self.tableNames[self.futureNetworkLayer]).lower()
        if self.futureNetworkLayerDBTableName:
            query += ", '{}'".format(self.futureNetworkLayerDBTableName)
        else:
            query += ", NULL"
        # futureStopsTableName = (self.tableNames[self.futureStopsLayer]).lower()
        if self.futureStopsLayerDBTableName:
            query += ", '{}'".format(self.futureStopsLayerDBTableName)
        query += ')'
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        QgsMessageLog.logMessage(query, 'YKRTool', Qgis.Info)
        return query



    def createMunicipalitiesArrayString(self):
        municipalitiesArrayString = '' #'array[837]',

        if self.mainDialog.checkBoxMunicipalitiesKangasala.isChecked():
            municipalitiesArrayString += self.ykrToolDictionaries.getMunicipalityCode('Kangasala') + ','
        if self.mainDialog.checkBoxMunicipalitiesLempaala.isChecked():
            municipalitiesArrayString += self.ykrToolDictionaries.getMunicipalityCode('Lempaala') + ','
        if self.mainDialog.checkBoxMunicipalitiesNokia.isChecked():
            municipalitiesArrayString += self.ykrToolDictionaries.getMunicipalityCode('Nokia') + ','
        if self.mainDialog.checkBoxMunicipalitiesOrivesi.isChecked():
            municipalitiesArrayString += self.ykrToolDictionaries.getMunicipalityCode('Orivesi') + ','
        if self.mainDialog.checkBoxMunicipalitiesPirkkala.isChecked():
            municipalitiesArrayString += self.ykrToolDictionaries.getMunicipalityCode('Pirkkala') + ','
        if self.mainDialog.checkBoxMunicipalitiesTampere.isChecked():
            municipalitiesArrayString += self.ykrToolDictionaries.getMunicipalityCode('Tampere') + ','
        if self.mainDialog.checkBoxMunicipalitiesVesilahti.isChecked():
            municipalitiesArrayString += self.ykrToolDictionaries.getMunicipalityCode('Vesilahti') + ','
        if self.mainDialog.checkBoxMunicipalitiesYlojarvi.isChecked():
            municipalitiesArrayString += self.ykrToolDictionaries.getMunicipalityCode('Ylojarvi') + ','

        if municipalitiesArrayString == '':
            municipalitiesArrayString = '211,418,536,562,604,837,922,980,'

        return 'array[' + municipalitiesArrayString[:-1] + ']'
    


    def postCalculation(self):
        '''Called after QueryTask finishes. Writes session info to sessions_v2 table and closes session'''
        try:
            self.writeSessionInfo()
            self.iface.messageBar().pushMessage(self.tr('Ready'), self.tr('Emission calculation ') +\
                str(self.getOutputTableName()) + self.tr(' is ready'), Qgis.Success, duration=0)
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in storing session data: '),\
                str(e), Qgis.Warning, duration=0)
            self.conn.rollback()
        try:
            self.addResultAsLayers()
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in adding emissions results to the QGIS: '), str(e), Qgis.Warning, duration=0)
            QgsMessageLog.logMessage(traceback.format_exc(), 'YKRTool', Qgis.Warning)
        try:
            self.cleanUpSession()
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in cleaning up: '), str(e), Qgis.Warning, duration=0)


    def writeSessionInfo(self):
        '''Writes session info to user_output.sessions_v2 table'''
        nameOfTheCO2EstimationRun = self.NameOfTheCO2EstimationRun if self.NameOfTheCO2EstimationRun != None else ''
        outputTableName = self.getOutputTableName()
        resultsTableName = outputTableName
        predefinedAreaName = self.ykrToolDictionaries.getPredefinedAreaNameFromDatabaseTableName(self.predefinedAreaDBTableName)
        municipalitiesArrayString = self.municipalitiesArrayString
        futureZoningAreasTableName = self.futureZoningAreasTableName
        futureNetworkLayerDBTableName = self.futureNetworkLayerDBTableName
        futureStopsLayerDBTableName = self.futureStopsLayerDBTableName
        uuid = self.sessionParams['uuid']
        user = self.sessionParams['user']
        startTime = self.sessionParams['startTime']
        baseYear = self.sessionParams['baseYear']
        targetYear = self.targetYear if self.calculateFuture else None
        pitkoScenario = self.pitkoScenario[:6]
        emissionsAllocation = self.emissionsAllocation
        elecEmissionType = self.elecEmissionType

        self.cur.execute('''INSERT INTO user_output.sessions_v2(session_name, results_table_name, aoi, municipalities, kt_table_name, kv_table_name, joli_table_name, sid, usr, starttime, baseyear, targetyear, calculationScenario, metodi, paastolaji) VALUES (%s, %s, %s, %s, %s, %s, %s,
        %s, %s, %s, %s, %s, %s, %s, %s)''', (nameOfTheCO2EstimationRun, resultsTableName, predefinedAreaName, municipalitiesArrayString, futureZoningAreasTableName, futureNetworkLayerDBTableName, futureStopsLayerDBTableName, uuid, user, startTime, baseYear, targetYear,\
            pitkoScenario, emissionsAllocation, elecEmissionType, ))
        self.conn.commit()


    def addResultAsLayers(self):
        outputSchemaName = 'user_output'
        outputTableName = self.getOutputTableName()
        uid = self.sessionParams['uuid']

        if self.mainDialog.checkBoxNokianMyllyCO2Zeroed.isChecked():
            self.zeroCO2inNokianMyllySquare(outputSchemaName, outputTableName)

        # if self.calculateFuture:
        #     self.updateYearToResultTable(outputSchemaName, outputTableName)

        # self.addPopulationToResultsTableIfNeeded(outputSchemaName, outputTableName)
        # self.addJobsToResultsTable(uid, outputSchemaName, outputTableName)


        #QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
        groupName = self.tr("emissions calculation results") + " {}".format(outputTableName)
        #root = QgsProject.instance().layerTreeRoot()
        #rootGroup = root.insertGroup(0, groupName)

        rootGroup = self.iface.layerTreeView().currentGroupNode()
        if rootGroup != None:
            rootGroup = rootGroup.addGroup(groupName) # ret QgsLayerTreeGroup 
        else:
            root = QgsProject.instance().layerTreeRoot()
            rootGroup = root.insertGroup(0, groupName)

        # order = QgsProject.instance().layerTreeRoot().customLayerOrder()
        # order.insert( 0, order.pop( order.index( vlayer.id() ) ) ) # vlayer to the top
        # bridge.setCustomLayerOrder( order )

        self.visualizeTrafficEmissions(rootGroup, uid, outputSchemaName, outputTableName)
        self.visualizeThermoEmissions(rootGroup, uid, outputSchemaName, outputTableName)
        self.visualizeElectricityEmissions(rootGroup, uid, outputSchemaName, outputTableName)
        self.createUrbanDevelopmentVisualizations(rootGroup, uid, outputSchemaName, outputTableName)

        layerNames = []
        layerNames.append((self.tr('CO2 sources grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_sources.qml')))
        layerNames.extend(self.calculateRelativeGeneralEmissions(uid, outputSchemaName, outputTableName))
        layerNames.append((self.tr('CO2 total grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_t_grid.qml')))
        layerNames.append((self.tr('YKR Zones (UZ and urban-countryside)') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/zones.qml')))
        # Visualize population grid, employees grid and floor space grid
        layerNames.append((self.tr('Population count') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/Population.qml')))
        layerNames.append((self.tr('Employee count') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/employees.qml')))
        layerNames.append((self.tr('Floor space (m2)') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/floorspace.qml')))

        if self.mainDialog.checkBoxCreateYKRZoneSummaryStats.isChecked():
            self.ykrZonesStats.calculateYKRZoneEmissions(uid, outputSchemaName, outputTableName)

        self.createQuickchartIoLinks(uid, outputSchemaName, outputTableName)

        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')


        groupName = self.tr("general")
        group = rootGroup.addGroup(groupName)

        for name in layerNames:
            layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
            layer.loadNamedStyle(name[1])
            renderer = layer.renderer()
            if renderer != None and renderer.type() == 'graduatedSymbol':
                renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
            self.resultLayers.append(layer)
            QgsProject.instance().addMapLayer(layer, False)
            group.addLayer(layer)

        for layer in self.resultLayers: # To have all columns in all layers
            layer.setDataSource( layer.source(), layer.name(), layer.providerType() )
            #layer.dataProvider().reloadData()


    def createQuickchartIoLinks(self, uid, outputSchemaName, outputTableName, retriesLeft=3):
        queries = []
    
        if self.mainDialog.checkBoxAddQuickchartIoLinksOfRelativeEmissionsByZone.isChecked():
            queries.extend(self.createQuickchartIoEmissionsPerFloorSpaceByZone(uid, outputSchemaName, outputTableName))
            queries.extend(self.createQuickchartIoEmissionsPerPopJobByZone(uid, outputSchemaName, outputTableName))
            queries.extend(self.createQuickchartIoPersonalEmissionsPerPopJobByZone(uid, outputSchemaName, outputTableName))

        if self.mainDialog.checkBoxAddQuickchartIoLinksOfZoneSquaresAndPopJobPercentagesOfTotalByZone.isChecked():
            queries.extend(self.createQuickchartIoZoneSquaresPercentagesOfTotalByZone(uid, outputSchemaName, outputTableName))
            queries.extend(self.createQuickchartIoPopJobPercentagesOfTotalByZone(uid, outputSchemaName, outputTableName))

        if len(queries) > 0:
            conn = None

            try:
                conn = createDbConnection(self.connParams)
            except Exception as e:
                if retriesLeft > 0:
                    return self.createQuickchartIoLinks(uid, outputSchemaName, outputTableName, retriesLeft - 1)
                else:
                    self.iface.messageBar().pushMessage(
                        self.tr('Error in connecting to the database'),
                        str(e), Qgis.Warning, duration=0)
                    return False

            try:
                cur = conn.cursor()
                for query in queries:
                    cur.execute(query)
                    conn.commit()
            except Exception as e:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in modifying the results table ') + "{}".format(query),
                    str(e), Qgis.Warning, duration=0)
                conn.rollback()
                conn.close()

                return False

            conn.commit()

            return True


    def createQuickchartIoZoneSquaresPercentagesOfTotalByZone(self, uid, outputSchemaName, outputTableName):
        queries = []
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN chart_yhdrak_vyohykkeet_pros_osuus_ruuduista_by_zone VARCHAR"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        
        sum_squares_on_zone_1 = 0
        sum_squares_on_zone_10 = 0
        sum_squares_on_zone_837101 = 0
        sum_squares_on_zone_2 = 0
        sum_squares_on_zone_3 = 0
        sum_squares_on_zone_4 = 0
        sum_squares_on_zone_5 = 0
        sum_squares_on_zone_81 = 0
        sum_squares_on_zone_82 = 0
        sum_squares_on_zone_83 = 0
        sum_squares_on_zone_84 = 0
        sum_squares_on_zone_85 = 0
        sum_squares_on_zone_86 = 0
        sum_squares_on_zone_87 = 0

        sum_squares_on_good_zones = 0

        sum_all_squares = 0

        good_zones = [1, 2, 3, 10, 837101]

        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')

        targetLayer = QgsVectorLayer(uri.uri(False), "emissions target layer", 'postgres')

        targetFeatures = targetLayer.getFeatures()

        for targetFeature in targetFeatures:
            sum_all_squares += 1

            if targetFeature['zone'] == 1:
                sum_squares_on_zone_1 += 1
                if 1 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 10:
                sum_squares_on_zone_10 += 1
                if 10 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 837101:
                sum_squares_on_zone_837101 += 1
                if 837101 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 2:
                sum_squares_on_zone_2 += 1
                if 2 in good_zones:
                    sum_squares_on_good_zones += 1              
            elif targetFeature['zone'] == 3:
                sum_squares_on_zone_3 += 1
                if 3 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 4:
                sum_squares_on_zone_4 += 1
                if 4 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 5:
                sum_squares_on_zone_5 += 1
                if 5 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 81:
                sum_squares_on_zone_81 += 1
                if 81 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 82:
                sum_squares_on_zone_82 += 1
                if 82 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 83:
                sum_squares_on_zone_83 += 1
                if 83 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 84:
                sum_squares_on_zone_84 += 1
                if 84 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 85:
                sum_squares_on_zone_85 += 1
                if 85 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 86:
                sum_squares_on_zone_86 += 1
                if 86 in good_zones:
                    sum_squares_on_good_zones += 1
            elif targetFeature['zone'] == 87:
                sum_squares_on_zone_87 += 1
                if 87 in good_zones:
                    sum_squares_on_good_zones += 1

        sum_squares_on_good_zones_as_percentage_of_total = ((sum_squares_on_good_zones / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_1_as_percentage_of_total = ((sum_squares_on_zone_1 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_10_as_percentage_of_total = ((sum_squares_on_zone_10 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_837101_as_percentage_of_total = ((sum_squares_on_zone_837101 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_2_as_percentage_of_total = ((sum_squares_on_zone_2 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_3_as_percentage_of_total = ((sum_squares_on_zone_3 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_4_as_percentage_of_total = ((sum_squares_on_zone_4 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_5_as_percentage_of_total = ((sum_squares_on_zone_5 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_81_as_percentage_of_total = ((sum_squares_on_zone_81 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_82_as_percentage_of_total = ((sum_squares_on_zone_82 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_83_as_percentage_of_total = ((sum_squares_on_zone_83 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_84_as_percentage_of_total = ((sum_squares_on_zone_84 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_85_as_percentage_of_total = ((sum_squares_on_zone_85 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_86_as_percentage_of_total = ((sum_squares_on_zone_86 / sum_all_squares) if sum_all_squares > 0 else 0) * 100
        sum_squares_on_zone_87_as_percentage_of_total = ((sum_squares_on_zone_87 / sum_all_squares) if sum_all_squares > 0 else 0) * 100


        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET chart_yhdrak_vyohykkeet_pros_osuus_ruuduista_by_zone = "
        query += ("'https://quickchart.io/chart?w=600&h=300&c={type:''bar'',"
            "data:{labels:["
                "''Edullisimmat vyöhykkeet'',"
                "''1 = Keskustan jalankulkuvyöhyke'',"
                "''10 = Alakeskuksen jalankulkuvyöhyke'',"
                "''837101 = Hervanta (alakeskus, HLT:ssä eroja)'',"
                "''2 = Keskustan reunavyöhyke'',"
                "''3 = Intensiivinen joukkoliikkennevyöhyke'',"
                "''4 = Joukkoliikkennevyöhyke'',"
                "''5 = Autovyöhyke'',"
                "''81 = Sisempi kaupunkialue'',"
                "''82 = Ulompi kaupunkialue'',"
                "''83 = Kaupungin kehysalue'',"
                "''84 = Maaseudun paikalliskeskus'',"
                "''85 = Kaupungin läheinen maaseutu'',"
                "''86 = Ydinmaaseutu'',"
                "''87 = Harvaan asuttu maaseutu''],"
                "datasets:[")
        query += (
                "{backgroundColor:""["
                "''rgba(255,154,1,1)'',"
                "''rgba(117,213,205,1)'',"
                "''rgba(207,30,169,1)'',"
                "''rgba(235,102,58,1)'',"
                "''rgba(238,36,100,1)'',"
                "''rgba(119,73,226,1)'',"
                "''rgba(238,169,65,1)'',"
                "''rgba(145,222,77,1)'',"
                "''rgba(66,118,221,1)'',"
                "''rgba(21,24,155,1)'',"
                "''rgba(115,92,158,1)'',"
                "''rgba(155,155,155,1)'',"
                "''rgba(174,107,24,1)'',"
                "''rgba(213,180,60,1)'',"
                "''rgba(48,108,35,1)''],")
        query += "data:[''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'']}},".format(
            round(sum_squares_on_good_zones_as_percentage_of_total, 1),
            round(sum_squares_on_zone_1_as_percentage_of_total, 1),
            round(sum_squares_on_zone_10_as_percentage_of_total, 1),
            round(sum_squares_on_zone_837101_as_percentage_of_total, 1),
            round(sum_squares_on_zone_2_as_percentage_of_total, 1),
            round(sum_squares_on_zone_3_as_percentage_of_total, 1),
            round(sum_squares_on_zone_4_as_percentage_of_total, 1),
            round(sum_squares_on_zone_5_as_percentage_of_total, 1),
            round(sum_squares_on_zone_81_as_percentage_of_total, 1),
            round(sum_squares_on_zone_82_as_percentage_of_total, 1),
            round(sum_squares_on_zone_83_as_percentage_of_total, 1),
            round(sum_squares_on_zone_84_as_percentage_of_total, 1),
            round(sum_squares_on_zone_85_as_percentage_of_total, 1),
            round(sum_squares_on_zone_86_as_percentage_of_total, 1),
            round(sum_squares_on_zone_87_as_percentage_of_total, 1)
        )
        query += (
                "{backgroundColor:""["
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)''],")
        query += "data:[''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'']}}".format(
            round(100-sum_squares_on_good_zones_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_1_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_10_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_837101_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_2_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_3_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_4_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_5_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_81_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_82_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_83_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_84_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_85_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_86_as_percentage_of_total, 1),
            round(100-sum_squares_on_zone_87_as_percentage_of_total, 1)
        )
        query += "]},"
        query += "options:{scales:{xAxes:[{stacked:true}],yAxes:[{stacked:true}]},title:{display:true,text:''Yhdyskuntrakenteen vyöhykkeet (%25 ruuduista)''},legend:{display:false}}}'"

        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        return queries


    def createQuickchartIoPopJobPercentagesOfTotalByZone(self, uid, outputSchemaName, outputTableName):
        md = self.mainDialog
        
        queries = []
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN chart_as_ja_tp_pros_osuus_ruuduista_by_zone VARCHAR"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        
        sum_pop_job_on_zone_1 = 0
        sum_pop_job_on_zone_10 = 0
        sum_pop_job_on_zone_837101 = 0
        sum_pop_job_on_zone_2 = 0
        sum_pop_job_on_zone_3 = 0
        sum_pop_job_on_zone_4 = 0
        sum_pop_job_on_zone_5 = 0
        sum_pop_job_on_zone_81 = 0
        sum_pop_job_on_zone_82 = 0
        sum_pop_job_on_zone_83 = 0
        sum_pop_job_on_zone_84 = 0
        sum_pop_job_on_zone_85 = 0
        sum_pop_job_on_zone_86 = 0
        sum_pop_job_on_zone_87 = 0

        # sum_pop_on_zone_1 = 0
        # sum_pop_on_zone_10 = 0
        # sum_pop_on_zone_837101 = 0
        # sum_pop_on_zone_2 = 0
        # sum_pop_on_zone_3 = 0
        # sum_pop_on_zone_4 = 0
        # sum_pop_on_zone_5 = 0
        # sum_pop_on_zone_81 = 0
        # sum_pop_on_zone_82 = 0
        # sum_pop_on_zone_83 = 0
        # sum_pop_on_zone_84 = 0
        # sum_pop_on_zone_85 = 0
        # sum_pop_on_zone_86 = 0
        # sum_pop_on_zone_87 = 0

        # sum_job_on_zone_1 = 0
        # sum_job_on_zone_10 = 0
        # sum_job_on_zone_837101 = 0
        # sum_job_on_zone_2 = 0
        # sum_job_on_zone_3 = 0
        # sum_job_on_zone_4 = 0
        # sum_job_on_zone_5 = 0
        # sum_job_on_zone_81 = 0
        # sum_job_on_zone_82 = 0
        # sum_job_on_zone_83 = 0
        # sum_job_on_zone_84 = 0
        # sum_job_on_zone_85 = 0
        # sum_job_on_zone_86 = 0
        # sum_job_on_zone_87 = 0

        # sum_pop_on_good_zones = 0
        # sum_job_on_good_zones = 0
        sum_pop_job_on_good_zones = 0

        sum_of_pop_all_squares = 0
        sum_of_job_all_squares = 0
        sum_of_pop_job_all_squares = 0

        good_zones = [1, 2, 3, 10, 837101]

        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')

        targetLayer = QgsVectorLayer(uri.uri(False), "emissions target layer", 'postgres')

        targetFeatures = targetLayer.getFeatures()

        for targetFeature in targetFeatures:
            sum_of_pop_all_squares += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
            sum_of_job_all_squares += (targetFeature['employ'] if targetFeature['employ'] != None else 0)

            if targetFeature['zone'] in good_zones:
                sum_pop_job_on_good_zones += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_good_zones += (targetFeature['employ'] if targetFeature['employ'] != None else 0)

            if targetFeature['zone'] == 1:
                sum_pop_job_on_zone_1 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_1 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 10:
                sum_pop_job_on_zone_10 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_10 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 837101:
                sum_pop_job_on_zone_837101 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_837101 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 2:
                sum_pop_job_on_zone_2 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_2 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 3:
                sum_pop_job_on_zone_3 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_3 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 4:
                sum_pop_job_on_zone_4 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_4 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 5:
                sum_pop_job_on_zone_5 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_5 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 81:
                sum_pop_job_on_zone_81 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_81 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 82:
                sum_pop_job_on_zone_82 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_82 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 83:
                sum_pop_job_on_zone_83 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_83 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 84:
                sum_pop_job_on_zone_84 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_84 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 85:
                sum_pop_job_on_zone_85 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_85 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 86:
                sum_pop_job_on_zone_86 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_86 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 87:
                sum_pop_job_on_zone_87 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_pop_job_on_zone_87 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)

        sum_of_pop_job_all_squares = sum_of_pop_all_squares + sum_of_job_all_squares

        sum_pop_job_on_good_zones_as_percentage_of_total = ((sum_pop_job_on_good_zones / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_1_as_percentage_of_total = ((sum_pop_job_on_zone_1 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_10_as_percentage_of_total = ((sum_pop_job_on_zone_10 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_837101_as_percentage_of_total = ((sum_pop_job_on_zone_837101 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_2_as_percentage_of_total = ((sum_pop_job_on_zone_2 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_3_as_percentage_of_total = ((sum_pop_job_on_zone_3 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_4_as_percentage_of_total = ((sum_pop_job_on_zone_4 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_5_as_percentage_of_total = ((sum_pop_job_on_zone_5 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_81_as_percentage_of_total = ((sum_pop_job_on_zone_81 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_82_as_percentage_of_total = ((sum_pop_job_on_zone_82 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_83_as_percentage_of_total = ((sum_pop_job_on_zone_83 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_84_as_percentage_of_total = ((sum_pop_job_on_zone_84 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_85_as_percentage_of_total = ((sum_pop_job_on_zone_85 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_86_as_percentage_of_total = ((sum_pop_job_on_zone_86 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100
        sum_pop_job_on_zone_87_as_percentage_of_total = ((sum_pop_job_on_zone_87 / sum_of_pop_job_all_squares) if sum_of_pop_job_all_squares > 0 else 0) * 100


        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET chart_as_ja_tp_pros_osuus_ruuduista_by_zone = "
        query += ("'https://quickchart.io/chart?w=600&h=300&c={type:''bar'',"
            "data:{labels:["
                "''Edullisimmat vyöhykkeet'',"
                "''1 = Keskustan jalankulkuvyöhyke'',"
                "''10 = Alakeskuksen jalankulkuvyöhyke'',"
                "''837101 = Hervanta (alakeskus, HLT:ssä eroja)'',"
                "''2 = Keskustan reunavyöhyke'',"
                "''3 = Intensiivinen joukkoliikkennevyöhyke'',"
                "''4 = Joukkoliikkennevyöhyke'',"
                "''5 = Autovyöhyke'',"
                "''81 = Sisempi kaupunkialue'',"
                "''82 = Ulompi kaupunkialue'',"
                "''83 = Kaupungin kehysalue'',"
                "''84 = Maaseudun paikalliskeskus'',"
                "''85 = Kaupungin läheinen maaseutu'',"
                "''86 = Ydinmaaseutu'',"
                "''87 = Harvaan asuttu maaseutu''],"
                "datasets:[")
        query += (
                "{backgroundColor:""["
                "''rgba(255,154,1,1)'',"
                "''rgba(117,213,205,1)'',"
                "''rgba(207,30,169,1)'',"
                "''rgba(235,102,58,1)'',"
                "''rgba(238,36,100,1)'',"
                "''rgba(119,73,226,1)'',"
                "''rgba(238,169,65,1)'',"
                "''rgba(145,222,77,1)'',"
                "''rgba(66,118,221,1)'',"
                "''rgba(21,24,155,1)'',"
                "''rgba(115,92,158,1)'',"
                "''rgba(155,155,155,1)'',"
                "''rgba(174,107,24,1)'',"
                "''rgba(213,180,60,1)'',"
                "''rgba(48,108,35,1)''],")
        query += "data:[''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'']}},".format(
            round(sum_pop_job_on_good_zones_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_1_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_10_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_837101_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_2_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_3_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_4_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_5_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_81_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_82_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_83_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_84_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_85_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_86_as_percentage_of_total, 1),
            round(sum_pop_job_on_zone_87_as_percentage_of_total, 1)
        )
        query += (
                "{backgroundColor:""["
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)'',"
                "''rgba(0,0,0,1)''],")
        query += "data:[''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'']}}".format(
            round(100-sum_pop_job_on_good_zones_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_1_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_10_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_837101_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_2_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_3_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_4_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_5_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_81_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_82_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_83_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_84_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_85_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_86_as_percentage_of_total, 1),
            round(100-sum_pop_job_on_zone_87_as_percentage_of_total, 1)
        )
        query += "]},"
        query += "options:{scales:{xAxes:[{stacked:true}],yAxes:[{stacked:true}]},title:{display:true,text:''Asukkaat ja työpaikat (%25 yhteissummasta)''},legend:{display:false}}}'"

        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        return queries


    def createQuickchartIoEmissionsPerFloorSpaceByZone(self, uid, outputSchemaName, outputTableName):
        queries = []
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN chart_paastot_yhteensa_tco2_per_floor_space_squares_by_zone VARCHAR"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        
        #sum_yhteensa_tco2_per_kem
        sum_all_squares_sum_yhteensa_tco2_zone_1 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_10 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_837101 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_2 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_3 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_4 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_5 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_81 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_82 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_83 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_84 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_85 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_86 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_87 = 0

        sum_all_squares_kem_zone_1 = 0
        sum_all_squares_kem_zone_10 = 0
        sum_all_squares_kem_zone_837101 = 0
        sum_all_squares_kem_zone_2 = 0
        sum_all_squares_kem_zone_3 = 0
        sum_all_squares_kem_zone_4 = 0
        sum_all_squares_kem_zone_5 = 0
        sum_all_squares_kem_zone_81 = 0
        sum_all_squares_kem_zone_82 = 0
        sum_all_squares_kem_zone_83 = 0
        sum_all_squares_kem_zone_84 = 0
        sum_all_squares_kem_zone_85 = 0
        sum_all_squares_kem_zone_86 = 0
        sum_all_squares_kem_zone_87 = 0

        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_1 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_10 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_837101 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_2 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_3 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_4 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_5 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_81 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_82 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_83 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_84 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_85 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_86 = 0
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_87 = 0

        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')

        targetLayer = QgsVectorLayer(uri.uri(False), "emissions target layer", 'postgres')

        targetFeatures = targetLayer.getFeatures()

        for targetFeature in targetFeatures:
            if targetFeature['zone'] == 1:
                sum_all_squares_sum_yhteensa_tco2_zone_1 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_1 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 10:
                sum_all_squares_sum_yhteensa_tco2_zone_10 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_10 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 837101:
                sum_all_squares_sum_yhteensa_tco2_zone_837101 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_837101 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 2:
                sum_all_squares_sum_yhteensa_tco2_zone_2 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_2 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)                
            elif targetFeature['zone'] == 3:
                sum_all_squares_sum_yhteensa_tco2_zone_3 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_3 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 4:
                sum_all_squares_sum_yhteensa_tco2_zone_4 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_4 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 5:
                sum_all_squares_sum_yhteensa_tco2_zone_5 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_5 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 81:
                sum_all_squares_sum_yhteensa_tco2_zone_81 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_81 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 82:
                sum_all_squares_sum_yhteensa_tco2_zone_82 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_82 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 83:
                sum_all_squares_sum_yhteensa_tco2_zone_83 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_83 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 84:
                sum_all_squares_sum_yhteensa_tco2_zone_84 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_84 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 85:
                sum_all_squares_sum_yhteensa_tco2_zone_85 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_85 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 86:
                sum_all_squares_sum_yhteensa_tco2_zone_86 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_86 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)
            elif targetFeature['zone'] == 87:
                sum_all_squares_sum_yhteensa_tco2_zone_87 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_kem_zone_87 += (targetFeature['floorspace'] if targetFeature['floorspace'] != None else 0)

        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_1 = ((sum_all_squares_sum_yhteensa_tco2_zone_1 / sum_all_squares_kem_zone_1) if sum_all_squares_kem_zone_1 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_10 = ((sum_all_squares_sum_yhteensa_tco2_zone_10 / sum_all_squares_kem_zone_10) if sum_all_squares_kem_zone_10 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_837101 = ((sum_all_squares_sum_yhteensa_tco2_zone_837101 / sum_all_squares_kem_zone_837101) if sum_all_squares_sum_yhteensa_tco2_zone_837101 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_2 = ((sum_all_squares_sum_yhteensa_tco2_zone_2 / sum_all_squares_kem_zone_2) if sum_all_squares_kem_zone_2 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_3 = ((sum_all_squares_sum_yhteensa_tco2_zone_3 / sum_all_squares_kem_zone_3) if sum_all_squares_kem_zone_3 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_4 = ((sum_all_squares_sum_yhteensa_tco2_zone_4 / sum_all_squares_kem_zone_4) if sum_all_squares_kem_zone_4 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_5 = ((sum_all_squares_sum_yhteensa_tco2_zone_5 / sum_all_squares_kem_zone_5) if sum_all_squares_kem_zone_5 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_81 = ((sum_all_squares_sum_yhteensa_tco2_zone_81 / sum_all_squares_kem_zone_81) if sum_all_squares_kem_zone_81 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_82 = ((sum_all_squares_sum_yhteensa_tco2_zone_82 / sum_all_squares_kem_zone_82) if sum_all_squares_kem_zone_82 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_83 = ((sum_all_squares_sum_yhteensa_tco2_zone_83 / sum_all_squares_kem_zone_83) if sum_all_squares_kem_zone_83 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_84 = ((sum_all_squares_sum_yhteensa_tco2_zone_84 / sum_all_squares_kem_zone_84) if sum_all_squares_kem_zone_84 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_85 = ((sum_all_squares_sum_yhteensa_tco2_zone_85 / sum_all_squares_kem_zone_85) if sum_all_squares_kem_zone_85 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_86 = ((sum_all_squares_sum_yhteensa_tco2_zone_86 / sum_all_squares_kem_zone_86) if sum_all_squares_kem_zone_86 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_kem_zone_87 = ((sum_all_squares_sum_yhteensa_tco2_zone_87 / sum_all_squares_kem_zone_87) if sum_all_squares_kem_zone_87 > 0 else 0)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET chart_paastot_yhteensa_tco2_per_floor_space_squares_by_zone = "
        query += ("'https://quickchart.io/chart?w=600&h=300&c={type:''bar'',"
            "data:{labels:["
                "''1 = Keskustan jalankulkuvyöhyke'',"
                "''10 = Alakeskuksen jalankulkuvyöhyke'',"
                "''837101 = Hervanta (alakeskus, HLT:ssä eroja)'',"
                "''2 = Keskustan reunavyöhyke'',"
                "''3 = Intensiivinen joukkoliikkennevyöhyke'',"
                "''4 = Joukkoliikkennevyöhyke'',"
                "''5 = Autovyöhyke'',"
                "''81 = Sisempi kaupunkialue'',"
                "''82 = Ulompi kaupunkialue'',"
                "''83 = Kaupungin kehysalue'',"
                "''84 = Maaseudun paikalliskeskus'',"
                "''85 = Kaupungin läheinen maaseutu'',"
                "''86 = Ydinmaaseutu'',"
                "''87 = Harvaan asuttu maaseutu''],"
                "datasets:[{backgroundColor: ["
                    "''rgba(117,213,205,1)'',"
                    "''rgba(207,30,169,1)'',"
                    "''rgba(235,102,58,1)'',"
                    "''rgba(238,36,100,1)'',"
                    "''rgba(119,73,226,1)'',"
                    "''rgba(238,169,65,1)'',"
                    "''rgba(145,222,77,1)'',"
                    "''rgba(66,118,221,1)'',"
                    "''rgba(21,24,155,1)'',"
                    "''rgba(115,92,158,1)'',"
                    "''rgba(155,155,155,1)'',"
                    "''rgba(174,107,24,1)'',"
                    "''rgba(213,180,60,1)'',"
                    "''rgba(48,108,35,1)''],")
        query += "data:[''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'']}}]}},".format(
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_1, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_10, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_837101, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_2, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_3, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_4, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_5, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_81, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_82, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_83, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_84, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_85, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_86, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_kem_zone_87, 3)
        )
        query += ("options:{title:{display:true,text:''Päästöt yhteensä tCO2-ekv / k-\u33A1''},legend:{display:false},plugins:{datalabels:{padding:5,display:true,color:''black'',font:{size:6},anchor:''end'',align:''end'',offset:-5},"
                    "scales:{xAxes:[{ticks:{fontSize:8},gridLines:{display:true}}],yAxes:[{ticks:{fontSize:8,suggestedMin:0,maxTicksLimit:5}}]},"
                    "legend:{position:''bottom'',labels:{boxWidth:20,fontSize:8}}}}}'")

        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        return queries


    def createQuickchartIoEmissionsPerPopJobByZone(self, uid, outputSchemaName, outputTableName):
        md = self.mainDialog

        queries = []
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN chart_paastot_yhteensa_tco2_per_pop_job_by_zone VARCHAR"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        
        #sum_yhteensa_tco2_per_kem
        sum_all_squares_sum_yhteensa_tco2_zone_1 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_10 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_837101 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_2 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_3 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_4 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_5 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_81 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_82 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_83 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_84 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_85 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_86 = 0
        sum_all_squares_sum_yhteensa_tco2_zone_87 = 0

        sum_all_squares_pop_job_zone_1 = 0
        sum_all_squares_pop_job_zone_10 = 0
        sum_all_squares_pop_job_zone_837101 = 0
        sum_all_squares_pop_job_zone_2 = 0
        sum_all_squares_pop_job_zone_3 = 0
        sum_all_squares_pop_job_zone_4 = 0
        sum_all_squares_pop_job_zone_5 = 0
        sum_all_squares_pop_job_zone_81 = 0
        sum_all_squares_pop_job_zone_82 = 0
        sum_all_squares_pop_job_zone_83 = 0
        sum_all_squares_pop_job_zone_84 = 0
        sum_all_squares_pop_job_zone_85 = 0
        sum_all_squares_pop_job_zone_86 = 0
        sum_all_squares_pop_job_zone_87 = 0

        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_1 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_10 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_837101 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_2 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_3 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_4 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_5 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_81 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_82 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_83 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_84 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_85 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_86 = 0
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_87 = 0

        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')

        targetLayer = QgsVectorLayer(uri.uri(False), "emissions target layer", 'postgres')

        targetFeatures = targetLayer.getFeatures()

        for targetFeature in targetFeatures:
            if targetFeature['zone'] == 1:
                sum_all_squares_sum_yhteensa_tco2_zone_1 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_1 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_1 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 10:
                sum_all_squares_sum_yhteensa_tco2_zone_10 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_10 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_10 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 837101:
                sum_all_squares_sum_yhteensa_tco2_zone_837101 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_837101 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_837101 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 2:
                sum_all_squares_sum_yhteensa_tco2_zone_2 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_2 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)  
                sum_all_squares_pop_job_zone_2 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 3:
                sum_all_squares_sum_yhteensa_tco2_zone_3 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_3 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_3 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 4:
                sum_all_squares_sum_yhteensa_tco2_zone_4 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_4 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_4 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 5:
                sum_all_squares_sum_yhteensa_tco2_zone_5 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_5 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_5 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 81:
                sum_all_squares_sum_yhteensa_tco2_zone_81 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_81 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_81 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 82:
                sum_all_squares_sum_yhteensa_tco2_zone_82 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_82 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_82 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 83:
                sum_all_squares_sum_yhteensa_tco2_zone_83 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_83 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_83 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 84:
                sum_all_squares_sum_yhteensa_tco2_zone_84 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_84 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_84 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 85:
                sum_all_squares_sum_yhteensa_tco2_zone_85 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_85 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_85 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 86:
                sum_all_squares_sum_yhteensa_tco2_zone_86 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_86 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_86 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 87:
                sum_all_squares_sum_yhteensa_tco2_zone_87 += (targetFeature['sum_yhteensa_tco2'] if targetFeature['sum_yhteensa_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_87 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_87 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)

        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_1 = ((sum_all_squares_sum_yhteensa_tco2_zone_1 / sum_all_squares_pop_job_zone_1) if sum_all_squares_pop_job_zone_1 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_10 = ((sum_all_squares_sum_yhteensa_tco2_zone_10 / sum_all_squares_pop_job_zone_10) if sum_all_squares_pop_job_zone_10 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_837101 = ((sum_all_squares_sum_yhteensa_tco2_zone_837101 / sum_all_squares_pop_job_zone_837101) if sum_all_squares_sum_yhteensa_tco2_zone_837101 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_2 = ((sum_all_squares_sum_yhteensa_tco2_zone_2 / sum_all_squares_pop_job_zone_2) if sum_all_squares_pop_job_zone_2 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_3 = ((sum_all_squares_sum_yhteensa_tco2_zone_3 / sum_all_squares_pop_job_zone_3) if sum_all_squares_pop_job_zone_3 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_4 = ((sum_all_squares_sum_yhteensa_tco2_zone_4 / sum_all_squares_pop_job_zone_4) if sum_all_squares_pop_job_zone_4 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_5 = ((sum_all_squares_sum_yhteensa_tco2_zone_5 / sum_all_squares_pop_job_zone_5) if sum_all_squares_pop_job_zone_5 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_81 = ((sum_all_squares_sum_yhteensa_tco2_zone_81 / sum_all_squares_pop_job_zone_81) if sum_all_squares_pop_job_zone_81 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_82 = ((sum_all_squares_sum_yhteensa_tco2_zone_82 / sum_all_squares_pop_job_zone_82) if sum_all_squares_pop_job_zone_82 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_83 = ((sum_all_squares_sum_yhteensa_tco2_zone_83 / sum_all_squares_pop_job_zone_83) if sum_all_squares_pop_job_zone_83 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_84 = ((sum_all_squares_sum_yhteensa_tco2_zone_84 / sum_all_squares_pop_job_zone_84) if sum_all_squares_pop_job_zone_84 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_85 = ((sum_all_squares_sum_yhteensa_tco2_zone_85 / sum_all_squares_pop_job_zone_85) if sum_all_squares_pop_job_zone_85 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_86 = ((sum_all_squares_sum_yhteensa_tco2_zone_86 / sum_all_squares_pop_job_zone_86) if sum_all_squares_pop_job_zone_86 > 0 else 0)
        sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_87 = ((sum_all_squares_sum_yhteensa_tco2_zone_87 / sum_all_squares_pop_job_zone_87) if sum_all_squares_pop_job_zone_87 > 0 else 0)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET chart_paastot_yhteensa_tco2_per_pop_job_by_zone = "
        query += ("'https://quickchart.io/chart?w=600&h=300&c={type:''bar'',"
            "data:{labels:["
                "''1 = Keskustan jalankulkuvyöhyke'',"
                "''10 = Alakeskuksen jalankulkuvyöhyke'',"
                "''837101 = Hervanta (alakeskus, HLT:ssä eroja)'',"
                "''2 = Keskustan reunavyöhyke'',"
                "''3 = Intensiivinen joukkoliikkennevyöhyke'',"
                "''4 = Joukkoliikkennevyöhyke'',"
                "''5 = Autovyöhyke'',"
                "''81 = Sisempi kaupunkialue'',"
                "''82 = Ulompi kaupunkialue'',"
                "''83 = Kaupungin kehysalue'',"
                "''84 = Maaseudun paikalliskeskus'',"
                "''85 = Kaupungin läheinen maaseutu'',"
                "''86 = Ydinmaaseutu'',"
                "''87 = Harvaan asuttu maaseutu''],"
                "datasets:[{backgroundColor: ["
                    "''rgba(117,213,205,1)'',"
                    "''rgba(207,30,169,1)'',"
                    "''rgba(235,102,58,1)'',"
                    "''rgba(238,36,100,1)'',"
                    "''rgba(119,73,226,1)'',"
                    "''rgba(238,169,65,1)'',"
                    "''rgba(145,222,77,1)'',"
                    "''rgba(66,118,221,1)'',"
                    "''rgba(21,24,155,1)'',"
                    "''rgba(115,92,158,1)'',"
                    "''rgba(155,155,155,1)'',"
                    "''rgba(174,107,24,1)'',"
                    "''rgba(213,180,60,1)'',"
                    "''rgba(48,108,35,1)''],")
        query += "data:[''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'']}}]}},".format(
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_1, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_10, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_837101, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_2, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_3, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_4, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_5, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_81, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_82, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_83, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_84, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_85, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_86, 3),
            round(sum_all_squares_sum_yhteensa_tco2_per_pop_job_zone_87, 3)
        )
        query += ("options:{title:{display:true,text:''Päästöt yhteensä tCO2-ekv / (as.lkm %2B tp.lkm)''},legend:{display:false},plugins:{datalabels:{padding:5,display:true,color:''black'',font:{size:6},anchor:''end'',align:''end'',offset:-5},"
                    "scales:{xAxes:[{ticks:{fontSize:8},gridLines:{display:true}}],yAxes:[{ticks:{fontSize:8,suggestedMin:0,maxTicksLimit:5}}]},"
                    "legend:{position:''bottom'',labels:{boxWidth:20,fontSize:8}}}}}'")

        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        return queries


    def createQuickchartIoPersonalEmissionsPerPopJobByZone(self, uid, outputSchemaName, outputTableName):
        md = self.mainDialog

        queries = []
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN chart_hlo_liikenne_tco2_per_pop_job_by_zone VARCHAR"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        
        #liikenne_hlo_tco2_per_kem
        sum_all_squares_liikenne_hlo_tco2_zone_1 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_10 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_837101 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_2 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_3 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_4 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_5 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_81 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_82 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_83 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_84 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_85 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_86 = 0
        sum_all_squares_liikenne_hlo_tco2_zone_87 = 0

        sum_all_squares_pop_job_zone_1 = 0
        sum_all_squares_pop_job_zone_10 = 0
        sum_all_squares_pop_job_zone_837101 = 0
        sum_all_squares_pop_job_zone_2 = 0
        sum_all_squares_pop_job_zone_3 = 0
        sum_all_squares_pop_job_zone_4 = 0
        sum_all_squares_pop_job_zone_5 = 0
        sum_all_squares_pop_job_zone_81 = 0
        sum_all_squares_pop_job_zone_82 = 0
        sum_all_squares_pop_job_zone_83 = 0
        sum_all_squares_pop_job_zone_84 = 0
        sum_all_squares_pop_job_zone_85 = 0
        sum_all_squares_pop_job_zone_86 = 0
        sum_all_squares_pop_job_zone_87 = 0

        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_1 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_10 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_837101 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_2 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_3 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_4 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_5 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_81 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_82 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_83 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_84 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_85 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_86 = 0
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_87 = 0

        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')

        targetLayer = QgsVectorLayer(uri.uri(False), "emissions target layer", 'postgres')

        targetFeatures = targetLayer.getFeatures()

        for targetFeature in targetFeatures:
            if targetFeature['zone'] == 1:
                sum_all_squares_liikenne_hlo_tco2_zone_1 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_1 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_1 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 10:
                sum_all_squares_liikenne_hlo_tco2_zone_10 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_10 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_10 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 837101:
                sum_all_squares_liikenne_hlo_tco2_zone_837101 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_837101 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_837101 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 2:
                sum_all_squares_liikenne_hlo_tco2_zone_2 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_2 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_2 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 3:
                sum_all_squares_liikenne_hlo_tco2_zone_3 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_3 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_3 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 4:
                sum_all_squares_liikenne_hlo_tco2_zone_4 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_4 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_4 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 5:
                sum_all_squares_liikenne_hlo_tco2_zone_5 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_5 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_5 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 81:
                sum_all_squares_liikenne_hlo_tco2_zone_81 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_81 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_81 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 82:
                sum_all_squares_liikenne_hlo_tco2_zone_82 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_82 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_82 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 83:
                sum_all_squares_liikenne_hlo_tco2_zone_83 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_83 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_83 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 84:
                sum_all_squares_liikenne_hlo_tco2_zone_84 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_84 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_84 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 85:
                sum_all_squares_liikenne_hlo_tco2_zone_85 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_85 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_85 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 86:
                sum_all_squares_liikenne_hlo_tco2_zone_86 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_86 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_86 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)
            elif targetFeature['zone'] == 87:
                sum_all_squares_liikenne_hlo_tco2_zone_87 += (targetFeature['liikenne_hlo_tco2'] if targetFeature['liikenne_hlo_tco2'] != None else 0)
                sum_all_squares_pop_job_zone_87 += (targetFeature['pop'] if targetFeature['pop'] != None else 0)
                sum_all_squares_pop_job_zone_87 += (targetFeature['employ'] if targetFeature['employ'] != None else 0)

        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_1 = ((sum_all_squares_liikenne_hlo_tco2_zone_1 / sum_all_squares_pop_job_zone_1) if sum_all_squares_pop_job_zone_1 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_10 = ((sum_all_squares_liikenne_hlo_tco2_zone_10 / sum_all_squares_pop_job_zone_10) if sum_all_squares_pop_job_zone_10 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_837101 = ((sum_all_squares_liikenne_hlo_tco2_zone_837101 / sum_all_squares_pop_job_zone_837101) if sum_all_squares_liikenne_hlo_tco2_zone_837101 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_2 = ((sum_all_squares_liikenne_hlo_tco2_zone_2 / sum_all_squares_pop_job_zone_2) if sum_all_squares_pop_job_zone_2 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_3 = ((sum_all_squares_liikenne_hlo_tco2_zone_3 / sum_all_squares_pop_job_zone_3) if sum_all_squares_pop_job_zone_3 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_4 = ((sum_all_squares_liikenne_hlo_tco2_zone_4 / sum_all_squares_pop_job_zone_4) if sum_all_squares_pop_job_zone_4 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_5 = ((sum_all_squares_liikenne_hlo_tco2_zone_5 / sum_all_squares_pop_job_zone_5) if sum_all_squares_pop_job_zone_5 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_81 = ((sum_all_squares_liikenne_hlo_tco2_zone_81 / sum_all_squares_pop_job_zone_81) if sum_all_squares_pop_job_zone_81 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_82 = ((sum_all_squares_liikenne_hlo_tco2_zone_82 / sum_all_squares_pop_job_zone_82) if sum_all_squares_pop_job_zone_82 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_83 = ((sum_all_squares_liikenne_hlo_tco2_zone_83 / sum_all_squares_pop_job_zone_83) if sum_all_squares_pop_job_zone_83 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_84 = ((sum_all_squares_liikenne_hlo_tco2_zone_84 / sum_all_squares_pop_job_zone_84) if sum_all_squares_pop_job_zone_84 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_85 = ((sum_all_squares_liikenne_hlo_tco2_zone_85 / sum_all_squares_pop_job_zone_85) if sum_all_squares_pop_job_zone_85 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_86 = ((sum_all_squares_liikenne_hlo_tco2_zone_86 / sum_all_squares_pop_job_zone_86) if sum_all_squares_pop_job_zone_86 > 0 else 0)
        sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_87 = ((sum_all_squares_liikenne_hlo_tco2_zone_87 / sum_all_squares_pop_job_zone_87) if sum_all_squares_pop_job_zone_87 > 0 else 0)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET chart_hlo_liikenne_tco2_per_pop_job_by_zone = "
        query += ("'https://quickchart.io/chart?w=600&h=300&c={type:''bar'',"
            "data:{labels:["
                "''1 = Keskustan jalankulkuvyöhyke'',"
                "''10 = Alakeskuksen jalankulkuvyöhyke'',"
                "''837101 = Hervanta (alakeskus, HLT:ssä eroja)'',"
                "''2 = Keskustan reunavyöhyke'',"
                "''3 = Intensiivinen joukkoliikkennevyöhyke'',"
                "''4 = Joukkoliikkennevyöhyke'',"
                "''5 = Autovyöhyke'',"
                "''81 = Sisempi kaupunkialue'',"
                "''82 = Ulompi kaupunkialue'',"
                "''83 = Kaupungin kehysalue'',"
                "''84 = Maaseudun paikalliskeskus'',"
                "''85 = Kaupungin läheinen maaseutu'',"
                "''86 = Ydinmaaseutu'',"
                "''87 = Harvaan asuttu maaseutu''],"
                "datasets:[{backgroundColor: ["
                    "''rgba(117,213,205,1)'',"
                    "''rgba(207,30,169,1)'',"
                    "''rgba(235,102,58,1)'',"
                    "''rgba(238,36,100,1)'',"
                    "''rgba(119,73,226,1)'',"
                    "''rgba(238,169,65,1)'',"
                    "''rgba(145,222,77,1)'',"
                    "''rgba(66,118,221,1)'',"
                    "''rgba(21,24,155,1)'',"
                    "''rgba(115,92,158,1)'',"
                    "''rgba(155,155,155,1)'',"
                    "''rgba(174,107,24,1)'',"
                    "''rgba(213,180,60,1)'',"
                    "''rgba(48,108,35,1)''],")
        query += "data:[''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'',''{}'']}}]}},".format(
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_1, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_10, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_837101, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_2, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_3, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_4, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_5, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_81, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_82, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_83, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_84, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_85, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_86, 3),
            round(sum_all_squares_liikenne_hlo_tco2_per_pop_job_zone_87, 3)
        )
        query += ("options:{title:{display:true,text:''Henkilöliik. päästöt yhteensä tCO2-ekv / (as.lkm %2B tp.lkm)''},legend:{display:false},plugins:{datalabels:{padding:5,display:true,color:''black'',font:{size:6},anchor:''end'',align:''end'',offset:-5},"
                    "scales:{xAxes:[{ticks:{fontSize:8},gridLines:{display:true}}],yAxes:[{ticks:{fontSize:8,suggestedMin:0,maxTicksLimit:5}}]},"
                    "legend:{position:''bottom'',labels:{boxWidth:20,fontSize:8}}}}}'")

        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        return queries


    # def addPopulationToResultsTableIfNeeded(self, outputSchemaName, outputTableName, retriesLeft=3):
    #     md = self.mainDialog
    #     if not md.checkBoxLoadYkrPopFromMapLayer.isChecked():
    #         ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(md.comboBoxYkrPop.currentText())
    #     else:
    #         ykrPopTableName = self.ykrUploadedPopTableName

    #     queries = []

    #     if ykrPopTableName != None and ykrPopTableName != '-':
    #         ykrPopTableNameParts = ykrPopTableName.replace('"', '').split('.')

    #         query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN v_yht integer DEFAULT 0"
    #         # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
    #         queries.append(query)

    #         query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET v_yht = (SELECT v_yht FROM \"" + ykrPopTableNameParts[0] + "\".\"" + ykrPopTableNameParts[1] + "\" AS ykr WHERE ykr.xyind = out_grid.xyind AND out_grid.mun = ykr.kunta::int)"
    #         # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
    #         queries.append(query)

    #     conn = None

    #     try:
    #         conn = createDbConnection(self.connParams)
    #     except Exception as e:
    #         if retriesLeft > 0:
    #             return self.addPopulationToResultsTableIfNeeded(outputSchemaName, outputTableName, retriesLeft - 1)
    #         else:
    #             self.iface.messageBar().pushMessage(
    #                 self.tr('Error in connecting to the database'),
    #                 str(e), Qgis.Warning, duration=0)
    #             return False

    #     try:
    #         cur = conn.cursor()
    #         for query in queries:
    #             cur.execute(query)
    #             conn.commit()
    #     except Exception as e:
    #         self.iface.messageBar().pushMessage(
    #             self.tr('Error in modifying the results table ') + "{}".format(query),
    #             str(e), Qgis.Warning, duration=0)
    #         conn.rollback()
    #         conn.close()

    #         return False

    #     return True


    # def addJobsToResultsTable(self, uid, outputSchemaName, outputTableName, retriesLeft=3):
    #     md = self.mainDialog
    #     if not md.checkBoxLoadYkrJobFromMapLayer.isChecked():
    #         ykrJobTableName = self.ykrToolDictionaries.getYkrJobTableDatabaseTableName(md.comboBoxYkrJob.currentText())
    #     else:
    #         ykrJobTableName = self.ykrUploadedJobTableName
    #     ykrJobTableNameParts = ykrJobTableName.replace('"', '').split('.')

    #     queries = []
    #     query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN tp_yht integer DEFAULT 0"
    #     # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
    #     queries.append(query)
    #     query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET tp_yht = (SELECT tp_yht FROM \"" + ykrJobTableNameParts[0] + "\".\"" + ykrJobTableNameParts[1] + "\" AS ykr WHERE ykr.xyind = out_grid.xyind AND out_grid.mun = ykr.kunta::int)"
    #     # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
    #     queries.append(query)

    #     if self.calculateFuture:
    #         # calculate change in workplaces for each square and update tp_yht accordingly
    #         queries.extend(self.createCalculateFutureJobsQueries(uid, outputSchemaName, outputTableName))
        
    #     conn = None

    #     try:
    #         conn = createDbConnection(self.connParams)
    #     except Exception as e:
    #         if retriesLeft > 0:
    #             return self.addJobsToResultsTable(outputSchemaName, outputTableName, retriesLeft - 1)
    #         else:
    #             self.iface.messageBar().pushMessage(
    #                 self.tr('Error in connecting to the database'),
    #                 str(e), Qgis.Warning, duration=0)
    #             return False

    #     try:
    #         cur = conn.cursor()
    #         for query in queries:
    #             cur.execute(query)
    #             conn.commit()
    #     except Exception as e:
    #         self.iface.messageBar().pushMessage(
    #             self.tr('Error in modifying the results table ') + "{}".format(query),
    #             str(e), Qgis.Warning, duration=0)
    #         conn.rollback()
    #         conn.close()

    #         return False

    #     conn.commit()

    #     return True


    def createUrbanDevelopmentVisualizations(self, rootGroup, uid, outputSchemaName, outputTableName):
        layerNames = []
        
        groupName = self.tr("urban devlopment")
        group = rootGroup.addGroup(groupName)

        if self.mainDialog.checkBoxVisualizePopJobMix.isChecked():
            success = self.calculatePopJobMix(outputSchemaName, outputTableName)
            if success:
                layerNames.append((self.tr('pop employ mix grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/pop_job_mix_grid.qml')))

        if self.mainDialog.checkBoxVisualizeGoodZonesForPopJobDensityAndSustainableTransport.isChecked():
            layerNames.append((self.tr('good UZ zones for population, jobs and sustainable transport grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/good_uz_zones_grid.qml')))
        
        if self.mainDialog.checkBoxVisualizeFloorSpaceRatio.isChecked():
            layerNames.append((self.tr('Buildings floor space / YKR square area >= 0.2') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/floor_space_ratio.qml')))

        if self.mainDialog.checkBoxVisualizeSustainableUrbanStructure.isChecked():
            success = self.caclulateSustainableUrbanStructure(group, uid, outputSchemaName, outputTableName)
            # if success: # sustainable_urban_structure.qml
            #     layerNames.append((self.tr('Sustainable Urban Structure, Count of True Value Indicators') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sustainable_urban_structure.qml')))
            #     layerNames.append((self.tr('Sustainable Urban Structure, Relatively Low Personal Traffic Emissions') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_relat_low_pers_traffic_emissions.qml')))
            #     layerNames.append((self.tr('Sustainable Urban Structure, Households not Owning Cars are Relatively Common') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_households_no_cars_common.qml')))
            #     layerNames.append((self.tr('Sustainable Urban Structure, Households not Owning 2 or More Cars are Relatively Common') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_households_below_2_cars_common.qml')))
            #     layerNames.append((self.tr('Sustainable Urban Structure, Sufficient Mix of Population and Jobs') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_sufficient_mix_pop_job.qml')))
            #     layerNames.append((self.tr('Sustainable Urban Structure, Sufficient Density of Population and Jobs for Walkable City') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_sufficient_pop_job_density_walk_city.qml')))
            #     layerNames.append((self.tr('Sustainable Urban Structure, Sufficient Density of Population and Jobs for Public Transport') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_sufficient_pop_job_density_pub_transport.qml')))

        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')

        for name in layerNames:
            layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
            layer.loadNamedStyle(name[1])
            renderer = layer.renderer()
            if renderer.type() == 'graduatedSymbol':
                renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
            self.resultLayers.append(layer)
            QgsProject.instance().addMapLayer(layer, False)
            group.addLayer(layer)


    def createSustainableUrbanStructureResultLayer(self, uid, outputSchemaName, outputTableName, retriesLeft=3):
        queries = []
        # if self.mainDialog.checkBoxStoreSustainableUrbanStructureDataToDatabase.isChecked():
        tableName = "output_sustainable_urban_structure_{}".format(uid)

        query = """CREATE TABLE \"{}\".\"{}\"(
        id integer PRIMARY KEY,
        geom geometry(MultiPolygon, 3067),
        xyind varchar,
        mun varchar,
        asukkaat integer,
        tyopaikat integer,
        tiiveys_asukkaat_plus_tyopaikat_per_ha real,
        joukkoliikennekaup_mahd_tiiveys varchar,
        kavelykaup_mahd_tiiveys varchar,
        asukkaat_per_asukkaat_plus_tyopaikat real,
        keskustamainen_toim_seko varchar,
        asuntokunta_0_autoa_pros_osuus real,
        asuntokunta_1_autoa_pros_osuus real,
        asuntokunta_2_autoa_pros_osuus real,
        autottomuus_suht_yleista varchar,
        kahd_auton_omistus_suht_vahaista varchar,
        liikenne_hlo_tco2 real,
        liikenne_hlo_tco2_per_as_tp real,
        verrat_alh_henkliik_paast varchar,
        kestavan_kaupunkirakenteen_mittarit_toteutuu_yht integer
        )
        """.format(outputSchemaName.replace('"', ''), tableName)

        queries.append(query)

        if self.mainDialog.checkBoxAllowOtherUsersToUseSustainableUrbanStructureTable.isChecked():
            query = "GRANT SELECT ON \"{}\".\"{}\" TO public".format(outputSchemaName.replace('"', ''), tableName)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                self.createSustainableUrbanStructureResultLayer(uid, outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()


        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        
        uri.setDataSource(outputSchemaName.replace('"', ''), tableName, 'geom')
        layer = QgsVectorLayer(uri.uri(False), tableName, 'postgres')
        provider = layer.dataProvider()
        # else:
        #     layer = QgsVectorLayer("Polygon?crs=epsg:3067", "Sustainable Urban Structure", "memory")

        #     provider = layer.dataProvider()
        #     layer.startEditing()
        #     provider.addAttributes([QgsField("id", QVariant.Int, "integer"),
        #                             QgsField("xyind", QVariant.String, "string"),
        #                             QgsField("mun", QVariant.String, "string"),
        #                             QgsField("asukkaat", QVariant.Int, "integer"),
        #                             QgsField("tyopaikat", QVariant.Int, "integer"),
        #                             QgsField("tiiveys_asukkaat_plus_tyopaikat_per_ha", QVariant.Double, "double"),
        #                             QgsField("joukkoliikennekaup_mahd_tiiveys", QVariant.String, "string"),
        #                             QgsField("kavelykaup_mahd_tiiveys", QVariant.String, "string"),
        #                             QgsField("asukkaat_per_asukkaat_plus_tyopaikat", QVariant.Double, "double"),
        #                             QgsField("keskustamainen_toim_seko", QVariant.String, "string"),
        #                             QgsField("asuntokunta_0_autoa_pros_osuus", QVariant.Double, "double"),
        #                             QgsField("asuntokunta_1_autoa_pros_osuus", QVariant.Double, "double"),
        #                             QgsField("asuntokunta_2_autoa_pros_osuus", QVariant.Double, "double"),
        #                             QgsField("autottomuus_suht_yleista", QVariant.String, "string"),
        #                             QgsField("kahd_auton_omistus_suht_vahaista", QVariant.String, "string"),
        #                             QgsField("liikenne_hlo_tco2", QVariant.String, "double"),
        #                             QgsField("liikenne_hlo_tco2_per_as_tp", QVariant.Double, "double"),
        #                             QgsField("verrat_alh_henkliik_paast", QVariant.String, "string"),
        #                             QgsField("kestavan_kaupunkirakenteen_mittarit_toteutuu_yht", QVariant.Int, "integer")
        #                             ])
        #     layer.commitChanges()

        return (layer, provider)


    def caclulateSustainableUrbanStructure(self, group, uid, outputSchemaName, outputTableName):
        # 1. laske autonomistustiedot QGIS:ssä olevan karttatason avulla pythonin muuttujiin
        # 2. Lisää laskennan tulostasoon kentät toteutuu vs. ei-toteudu kullekin ehtokentälle ja päivitä
        # 3. tee erilliset tasot ja visualisoinnit kullekin muuttujalle ja myös yhteinen taso ja visualisointi

        md = self.mainDialog

        carOwnershipMapLayer = md.mMapLayerComboBoxYKRCarOwnershipData.currentLayer()
        if carOwnershipMapLayer == None:
            raise Exception(self.tr("YRK Car Ownership Data layer has not been selected"))
        elif not carOwnershipMapLayer.isValid():
            raise Exception(self.tr("YRK Car Ownership Data layer is not valid"))
        else:
            # (TODO check that contains all expected data) 
            fields = carOwnershipMapLayer.fields()
            if fields.indexOf('xyind') == -1:
                raise Exception(self.tr("YRK Car Ownership Data layer does not contain field xyind"))
            if fields.indexOf('kunta') == -1:
                raise Exception(self.tr("YRK Car Ownership Data layer does not contain field kunta"))
            if fields.indexOf('kunta') == -1:
                raise Exception(self.tr("YRK Car Ownership Data layer does not contain field autoja_1"))
            if fields.indexOf('kunta') == -1:
                raise Exception(self.tr("YRK Car Ownership Data layer does not contain field autoja_2"))
            if fields.indexOf('kunta') == -1:
                raise Exception(self.tr("YRK Car Ownership Data layer does not contain field ak_yht"))

        queries = []

        (tempLayer, tempProvider) = self.createSustainableUrbanStructureResultLayer(uid, outputSchemaName, outputTableName)
        tempLayer.startEditing()

        features = []

        # query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN joukkoliikennekaup_mahd_tiiveys varchar"
        # # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)
        # query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN kavelykaup_mahd_tiiveys varchar"
        # # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)
        # query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN keskustamainen_toim_seko varchar"
        # # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)
        # query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN kahd_auton_omistus_suht_vahaista varchar"
        # # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)
        # query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN autottomuus_suht_yleista varchar"
        # # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)
        # query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN verrat_alh_henkliik_paast varchar"
        # # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)
        # query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN kestavan_kaupunkirakenteen_mittarit_toteutuu_yht int4"
        # # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)

        # Get result layer (to calculate only for xyind sqaures on the investigation area)
        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')

        targetLayer = QgsVectorLayer(uri.uri(False), "emissions target layer", 'postgres')

        targetFeatures = targetLayer.getFeatures()

        xyinds = set()
        muns = set()

        for targetFeature in targetFeatures:

            kestavan_kaupunkirakenteen_mittarit_toteutuu_yht = 0
            kestavan_kaupunkirakenteen_mittarit_toteutuu_yht_none_flag = False

            geometry = targetFeature.geometry()

            qgs_feature = QgsFeature()
            qgs_feature.setGeometry(geometry)
            fields = tempLayer.fields()
            qgs_feature.setFields(fields)

            xyind = targetFeature['xyind']
            mun = targetFeature['mun']
            xyinds.add(xyind)
            muns.add(mun)

            qgs_feature['id'] = targetFeature.id()
            qgs_feature['xyind'] = xyind
            qgs_feature['mun'] = mun

            '''joukkoliikennekaup_mahd_tiiveys, kavelykaup_mahd_tiiveys ja keskustamainen_toim_seko'''
            asukkaat = targetFeature['pop']
            tyopaikat = targetFeature['employ']
            qgs_feature['asukkaat'] = asukkaat
            qgs_feature['tyopaikat'] = tyopaikat
            asukkaat = float(asukkaat) if asukkaat != None else 0
            tyopaikat = float(tyopaikat) if tyopaikat != None else 0
            tiiveys_asukkaat_plus_tyopaikat_per_ha = (asukkaat + tyopaikat) / 6.25
            qgs_feature['tiiveys_asukkaat_plus_tyopaikat_per_ha'] = tiiveys_asukkaat_plus_tyopaikat_per_ha
            if (tiiveys_asukkaat_plus_tyopaikat_per_ha >= 35): # 6,25 hehtaaria = 250x250m
                query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET joukkoliikennekaup_mahd_tiiveys = 'Toteutuu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                kestavan_kaupunkirakenteen_mittarit_toteutuu_yht += 1
                qgs_feature['joukkoliikennekaup_mahd_tiiveys'] = 'Toteutuu'
            else:
                query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET joukkoliikennekaup_mahd_tiiveys = 'Ei toteudu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                qgs_feature['joukkoliikennekaup_mahd_tiiveys'] = 'Ei toteudu'
            # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
            if (tiiveys_asukkaat_plus_tyopaikat_per_ha >= 100): # 6,25 hehtaaria = 250x250m
                query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET kavelykaup_mahd_tiiveys = 'Toteutuu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                kestavan_kaupunkirakenteen_mittarit_toteutuu_yht += 1
                qgs_feature['kavelykaup_mahd_tiiveys'] = 'Toteutuu'
            else:
                query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET kavelykaup_mahd_tiiveys = 'Ei toteudu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                qgs_feature['kavelykaup_mahd_tiiveys'] = 'Ei toteudu'
            # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
            if (asukkaat + tyopaikat > 0):
                asukkaat_per_asukkaat_plus_tyopaikat = asukkaat / (asukkaat + tyopaikat)
                qgs_feature['asukkaat_per_asukkaat_plus_tyopaikat'] = asukkaat_per_asukkaat_plus_tyopaikat
                if (asukkaat_per_asukkaat_plus_tyopaikat >= 0.2) and (asukkaat_per_asukkaat_plus_tyopaikat <= 0.8):
                    query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET keskustamainen_toim_seko = 'Toteutuu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                    kestavan_kaupunkirakenteen_mittarit_toteutuu_yht += 1
                    qgs_feature['keskustamainen_toim_seko'] = 'Toteutuu'
                else:
                    query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET keskustamainen_toim_seko = 'Ei toteudu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                    qgs_feature['keskustamainen_toim_seko'] = 'Ei toteudu'
                # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
                queries.append(query)

            '''verrat_alh_henkliik_paast'''

            qgs_feature['liikenne_hlo_tco2'] = targetFeature['liikenne_hlo_tco2']
            liikenne_hlo_tco2_per_as_tp = targetFeature['liikenne_hlo_tco2_per_as_tp']
            if liikenne_hlo_tco2_per_as_tp != None:
                qgs_feature['liikenne_hlo_tco2_per_as_tp'] = liikenne_hlo_tco2_per_as_tp
                if liikenne_hlo_tco2_per_as_tp <= 0.05:
                    query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET verrat_alh_henkliik_paast = 'Toteutuu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                    kestavan_kaupunkirakenteen_mittarit_toteutuu_yht += 1
                    qgs_feature['verrat_alh_henkliik_paast'] = 'Toteutuu'
                else:
                    query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET verrat_alh_henkliik_paast = 'Ei toteudu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                    qgs_feature['verrat_alh_henkliik_paast'] = 'Ei toteudu'
                # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
                queries.append(query)
            else:
                kestavan_kaupunkirakenteen_mittarit_toteutuu_yht_none_flag = True

            if kestavan_kaupunkirakenteen_mittarit_toteutuu_yht > 0:
                qgs_feature['kestavan_kaupunkirakenteen_mittarit_toteutuu_yht'] = kestavan_kaupunkirakenteen_mittarit_toteutuu_yht
                query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET kestavan_kaupunkirakenteen_mittarit_toteutuu_yht = {} WHERE xyind ='{}' and mun='{}'".format(kestavan_kaupunkirakenteen_mittarit_toteutuu_yht, xyind, mun)
                # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
                queries.append(query)

            features.append(qgs_feature)

        tempProvider.addFeatures(features)
        tempLayer.commitChanges()
        tempLayer.startEditing()

        '''kahd_auton_omistus_suht_vahaista ja autottomuus_suht_yleista''' # Erikseen, jotta nopeampaa
        fields = tempLayer.fields()
        index_asuntokunta_0_autoa_pros_osuus = fields.indexOf("asuntokunta_0_autoa_pros_osuus")
        index_asuntokunta_1_autoa_pros_osuus = fields.indexOf("asuntokunta_1_autoa_pros_osuus")
        index_asuntokunta_2_autoa_pros_osuus = fields.indexOf("asuntokunta_2_autoa_pros_osuus")
        index_kahd_auton_omistus_suht_vahaista = fields.indexOf("kahd_auton_omistus_suht_vahaista")
        index_autottomuus_suht_yleista = fields.indexOf("autottomuus_suht_yleista")
        index_kestavan_kaupunkirakenteen_mittarit_toteutuu_yht = fields.indexOf("kestavan_kaupunkirakenteen_mittarit_toteutuu_yht")
        for carOwnershipFeature in carOwnershipMapLayer.getFeatures():
            mun = carOwnershipFeature['kunta']
            xyind = carOwnershipFeature['xyind']
            if mun in muns and xyind in xyinds:
                # QgsMessageLog.logMessage("mun {} in muns and xyind {} in xyinds".format(mun, xyind), 'YKRTool', Qgis.Info)
                exp = QgsExpression("xyind = '{}' AND mun = '{}'".format(xyind, mun))
                qgs_features = list(tempLayer.getFeatures(QgsFeatureRequest(exp)))
                # exp = QgsExpression("xyind = '{}' AND kunta = '{}'".format(xyind, mun))
                # carOwnershipFeatures = list(carOwnershipMapLayer.getFeatures(QgsFeatureRequest(exp)))
                # if len(carOwnershipFeatures) == 1:
                # carOwnershipFeature = carOwnershipFeatures[0]
                if len(qgs_features) == 1:
                    # QgsMessageLog.logMessage("found 1 qgs_features", 'YKRTool', Qgis.Info)
                    qgs_feature = qgs_features[0]
                    kestavan_kaupunkirakenteen_mittarit_toteutuu_yht = qgs_feature['kestavan_kaupunkirakenteen_mittarit_toteutuu_yht'] if qgs_feature['kestavan_kaupunkirakenteen_mittarit_toteutuu_yht'] != None else 0
                    # QgsMessageLog.logMessage("kestavan_kaupunkirakenteen_mittarit_toteutuu_yht alkup: {}".format(kestavan_kaupunkirakenteen_mittarit_toteutuu_yht), 'YKRTool', Qgis.Info)
                    autoja_1 = carOwnershipFeature['autoja_1']
                    autoja_2 = carOwnershipFeature['autoja_2']
                    ak_yht = carOwnershipFeature['ak_yht']
                    if autoja_1 != -1 and autoja_2 != -1:
                        asuntokunta_0_autoa_pros_osuus = (float(ak_yht) - (autoja_1 + autoja_2)) / ak_yht * 100
                        asuntokunta_1_autoa_pros_osuus = float(autoja_1) / ak_yht * 100
                        asuntokunta_2_autoa_pros_osuus = float(autoja_2) / ak_yht * 100
                        
                        tempLayer.changeAttributeValue(qgs_feature.id(), index_asuntokunta_0_autoa_pros_osuus, asuntokunta_0_autoa_pros_osuus)
                        tempLayer.changeAttributeValue(qgs_feature.id(), index_asuntokunta_1_autoa_pros_osuus, asuntokunta_1_autoa_pros_osuus)
                        tempLayer.changeAttributeValue(qgs_feature.id(), index_asuntokunta_2_autoa_pros_osuus, asuntokunta_2_autoa_pros_osuus)

                        if asuntokunta_1_autoa_pros_osuus > asuntokunta_2_autoa_pros_osuus and asuntokunta_2_autoa_pros_osuus < 30:
                            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET kahd_auton_omistus_suht_vahaista = 'Toteutuu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                            kestavan_kaupunkirakenteen_mittarit_toteutuu_yht += 1
                            tempLayer.changeAttributeValue(qgs_feature.id(), index_kahd_auton_omistus_suht_vahaista, 'Toteutuu')
                        else:
                            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET kahd_auton_omistus_suht_vahaista = 'Ei toteudu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                            tempLayer.changeAttributeValue(qgs_feature.id(), index_kahd_auton_omistus_suht_vahaista, 'Ei toteudu')
                        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
                        queries.append(query)

                        if asuntokunta_0_autoa_pros_osuus > asuntokunta_1_autoa_pros_osuus and asuntokunta_0_autoa_pros_osuus > 40:
                            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET autottomuus_suht_yleista = 'Toteutuu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                            kestavan_kaupunkirakenteen_mittarit_toteutuu_yht += 1
                            tempLayer.changeAttributeValue(qgs_feature.id(), index_autottomuus_suht_yleista, 'Toteutuu')
                        else:
                            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET autottomuus_suht_yleista = 'Ei toteudu' WHERE xyind ='{}' and mun='{}'".format(xyind, mun)
                            tempLayer.changeAttributeValue(qgs_feature.id(), index_autottomuus_suht_yleista, 'Ei toteudu')
                        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
                        queries.append(query)
                    else:
                        kestavan_kaupunkirakenteen_mittarit_toteutuu_yht_none_flag = True
                elif len(qgs_features) > 1:
                    raise Exception(self.tr("temporary layer had unexpected count of features for xyind") + " {} " + self.tr("and municipality code" + " {}: {}").format(xyind, mun, len(qgs_features)))
                else:
                    kestavan_kaupunkirakenteen_mittarit_toteutuu_yht_none_flag = True

                # if kestavan_kaupunkirakenteen_mittarit_toteutuu_yht_none_flag == False:
                if kestavan_kaupunkirakenteen_mittarit_toteutuu_yht > 0:
                    tempLayer.changeAttributeValue(qgs_feature.id(), index_kestavan_kaupunkirakenteen_mittarit_toteutuu_yht, kestavan_kaupunkirakenteen_mittarit_toteutuu_yht)
                    query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET kestavan_kaupunkirakenteen_mittarit_toteutuu_yht = {} WHERE xyind ='{}' and mun='{}'".format(kestavan_kaupunkirakenteen_mittarit_toteutuu_yht, xyind, mun)
                    # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
                    queries.append(query)

            # qgs_feature.setAttributes(values)


        # tempProvider.addFeatures(features)
        tempLayer.commitChanges()
        # QgsProject.instance().addMapLayer(layer)

        layerNames = []

        layerNames.append((self.tr('Sustainable Urban Structure, Count of True Value Indicators') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sustainable_urban_structure.qml')))
        layerNames.append((self.tr('Sufficient Density of Population and Jobs for Public Transport - Sustainable Urban Structure') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_sufficient_pop_job_density_pub_transport.qml')))
        layerNames.append((self.tr('Sufficient Density of Population and Jobs for Walkable City - Sustainable Urban Structure') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_sufficient_pop_job_density_walk_city.qml')))
        layerNames.append((self.tr('Sufficient Mix of Population and Jobs - Sustainable Urban Structure') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_sufficient_mix_pop_job.qml')))
        layerNames.append((self.tr('Density Induced Households Car Owning; More Households Owning 1 Car than 2 or More Cars; Portion of Households Owning 2 or More Cars < 30% - Sustainable Urban Structure') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_households_below_2_cars_common.qml')))
        layerNames.append((self.tr('Density Induced Households Car Owning; More Households Not Owning Car than Owning 1 Car; Portion of Households Not Owning Car > 40% - Sustainable Urban Structure') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_households_no_cars_common.qml')))
        layerNames.append((self.tr('Relatively Low Personal Traffic Emissions - Sustainable Urban Structure') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/urban_development/sust_urb_struct_relat_low_pers_traffic_emissions.qml')))

        for name in layerNames:
            layer = tempLayer.clone()
            layer.setName(name[0])
            layer.loadNamedStyle(name[1])
            renderer = layer.renderer()
            if renderer.type() == 'graduatedSymbol':
                renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
            # self.resultLayers.append(layer)
            QgsProject.instance().addMapLayer(layer, False)
            group.addLayer(layer)

        return True

        # conn = None

        # try:
        #     conn = createDbConnection(self.connParams)
        # except Exception as e:
        #     if retriesLeft > 0:
        #         return self.calculateElectricityEmissionsPerPerson(outputSchemaName, outputTableName, retriesLeft - 1)
        #     else:
        #         self.iface.messageBar().pushMessage(
        #             self.tr('Error in connecting to the database'),
        #             str(e), Qgis.Warning, duration=0)
        #         return False

        # try:
        #     cur = conn.cursor()
        #     for query in queries:
        #         cur.execute(query)
        #         conn.commit()
        # except Exception as e:
        #     self.iface.messageBar().pushMessage(
        #         self.tr('Error in modifying the results table ') + "{}".format(query),
        #         str(e), Qgis.Warning, duration=0)
        #     conn.rollback()
        #     conn.close()

        #     return False

        # return True


    def visualizeElectricityEmissions(self, rootGroup, uid, outputSchemaName, outputTableName):
        layerNames = []
    
        if self.mainDialog.checkBoxVisualizeElectricityConsumptionEmissions.isChecked():
            layerNames.append((self.tr('CO2 electricity sources grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_electricity_sources_grid.qml')))
            layerNames.append((self.tr('CO2 electricity total grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_electricity_grid.qml')))
            layerNames.append((self.tr('CO2 buildings electricity grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_buildings_electricity_grid.qml')))
            layerNames.append((self.tr('CO2 household electricity grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_household_electricity_grid.qml')))
            layerNames.append((self.tr('CO2 amenities electricity grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_amenities_electricity_grid.qml')))
            layerNames.append((self.tr('CO2 industry and warehouses electricity grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_industry_warehouses_electricity_grid.qml')))

            layerNames.extend(self.calculateRelativeElectricityEmissions(uid, outputSchemaName, outputTableName))

            groupName = self.tr("electricity emissions")
            group = rootGroup.addGroup(groupName)

            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
                self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(outputSchemaName, outputTableName, 'geom')

            for name in layerNames:
                layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
                layer.loadNamedStyle(name[1])
                renderer = layer.renderer()
                if renderer.type() == 'graduatedSymbol':
                    renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
                self.resultLayers.append(layer)
                QgsProject.instance().addMapLayer(layer, False)
                group.addLayer(layer)


    def calculateRelativeElectricityEmissions(self, uid, outputSchemaName, outputTableName):
        layerNames = []
        success = self.calculateElectricityEmissionsPerPerson(outputSchemaName, outputTableName)
        if success:
            layerNames.append((self.tr('CO2 electricity emissions / pop grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_electricity_pop_grid.qml')))

        return layerNames


    def visualizeThermoEmissions(self, rootGroup, uid, outputSchemaName, outputTableName):
        layerNames = []
    
        if self.mainDialog.checkBoxVisualizeThermoEmissions.isChecked():
            layerNames.append((self.tr('CO2 buildings thermo sources grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_thermo_sources_grid.qml')))
            layerNames.append((self.tr('CO2 buildings thermo total grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_thermo_grid.qml')))
            layerNames.append((self.tr('CO2 buildings water heating grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_water_heating_grid.qml')))
            layerNames.append((self.tr('CO2 buildings heating grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_heating_grid.qml')))
            layerNames.append((self.tr('CO2 buildings cooling grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_cooling_grid.qml')))

            layerNames.extend(self.calculateRelativeThermoEmissions(uid, outputSchemaName, outputTableName))

            groupName = self.tr("buildings thermo emissions")
            group = rootGroup.addGroup(groupName)

            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
                self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(outputSchemaName, outputTableName, 'geom')

            for name in layerNames:
                layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
                layer.loadNamedStyle(name[1])
                renderer = layer.renderer()
                if renderer.type() == 'graduatedSymbol':
                    renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
                self.resultLayers.append(layer)
                QgsProject.instance().addMapLayer(layer, False)
                group.addLayer(layer)


    def calculateRelativeThermoEmissions(self, uid, outputSchemaName, outputTableName):
        layerNames = []
        success = self.calculateThermoEmissionsPerPerson(outputSchemaName, outputTableName)
        if success:
            layerNames.append((self.tr('CO2 buildings thermo emissions / pop grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_thermo_pop_grid.qml')))

        return layerNames


    def visualizeTrafficEmissions(self, rootGroup, uid, outputSchemaName, outputTableName):
        layerNames = []
    
        if self.mainDialog.checkBoxVisualizeTrafficEmissions.isChecked():
            success = self.calculateSumOfPersonalTraffic(outputSchemaName, outputTableName)

            if success:
                layerNames.append((self.tr('CO2 traffic sources grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_traffic_sources_grid.qml')))
                layerNames.append((self.tr('CO2 traffic total grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_traffic_grid.qml')))
                layerNames.append((self.tr('CO2 commuter and other population traffic grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_personal_traffic_grid.qml')))
                layerNames.append((self.tr('CO2 industry and warehouses traffic grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_iwhs_traffic_grid.qml')))
                layerNames.append((self.tr('CO2 amenities traffic grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_amenities_traffic_grid.qml')))

                layerNames.extend(self.calculateRelativeTrafficEmissions(uid, outputSchemaName, outputTableName))


                groupName = self.tr("traffic emissions")
                group = rootGroup.addGroup(groupName)

                uri = QgsDataSourceUri()
                uri.setConnection(self.connParams['host'], self.connParams['port'],\
                    self.connParams['database'], self.connParams['user'], self.connParams['password'])
                uri.setDataSource(outputSchemaName, outputTableName, 'geom')

                for name in layerNames:
                    layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
                    layer.loadNamedStyle(name[1])
                    renderer = layer.renderer()
                    if renderer.type() == 'graduatedSymbol':
                        renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
                    self.resultLayers.append(layer)
                    QgsProject.instance().addMapLayer(layer, False)
                    group.addLayer(layer)


    def calculateRelativeTrafficEmissions(self, uid, outputSchemaName, outputTableName):
        layerNames = []

        success = self.calculateRelativeTrafficEmissionsToDatabase(outputSchemaName, outputTableName)
        if success:
            layerNames.append((self.tr('CO2 traffic emissions / pop grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_traffic_pop_grid.qml')))

        return layerNames


    def calculateRelativeGeneralEmissions(self, uid, outputSchemaName, outputTableName):
        layerNames = []

        if self.mainDialog.checkBoxCalculateEmissionsPerPerson.isChecked():
            success = self.calculateEmissionsPerPerson(outputSchemaName, outputTableName)
            if success:
                layerNames.append((self.tr('CO2 / pop grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_pop_grid.qml')))
    

        if self.mainDialog.checkBoxCalculateEmissionsPerJob.isChecked():
            success = self.calculateEmissionsPerJob(uid, outputSchemaName, outputTableName)
            if success:
                layerNames.append((self.tr('CO2 / job grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_job_grid.qml')))

        if self.mainDialog.checkBoxCalculateEmissionsPerPerson.isChecked() and self.mainDialog.checkBoxCalculateEmissionsPerJob.isChecked():
            success = self.calculateEmissionsPerPersonJob(outputSchemaName, outputTableName)
            if success:
                layerNames.append((self.tr('CO2 / (pop + employ) grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_pop_job_grid.qml')))

        if self.mainDialog.checkBoxCalculateEmissionsPerFloorSpaceSquares.isChecked():
            success = self.calculateEmissionsPerFloorSpaceSquares(outputSchemaName, outputTableName)
            if success:
                layerNames.append((self.tr('CO2 / floor space squares grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_floor_space_squares_grid.qml')))

        return layerNames


    def calculateElectricityEmissionsPerPerson(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_sahko_tco2_per_sum_yhteensa_tco2 real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_sahko_tco2_per_asukas real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_sahko_tco2_per_sum_yhteensa_tco2 = (sum_sahko_tco2 / NULLIF(sum_yhteensa_tco2 , 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_sahko_tco2_per_asukas = (sum_sahko_tco2 / NULLIF(pop, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateElectricityEmissionsPerPerson(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def calculateThermoEmissionsPerPerson(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_lammonsaato_tco2_per_sum_yhteensa_tco2 real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_lammonsaato_tco2_per_asukas real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_lammonsaato_tco2_per_sum_yhteensa_tco2 = (sum_lammonsaato_tco2 / NULLIF(sum_yhteensa_tco2 , 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_lammonsaato_tco2_per_asukas = (sum_lammonsaato_tco2 / NULLIF(pop, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateThermoEmissionsPerPerson(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def calculateRelativeTrafficEmissionsToDatabase(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_liikenne_tco2_per_sum_yhteensa_tco2 real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_liikenne_tco2_per_asukas real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN liikenne_hlo_tco2_per_sum_liikenne_tco2 real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN liikenne_hlo_tco2_per_sum_yhteensa_tco2 real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN liikenne_hlo_tco2_per_asukas real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN liikenne_hlo_tco2_per_tp real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN liikenne_hlo_tco2_per_as_tp real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)


        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_liikenne_tco2_per_sum_yhteensa_tco2 = (sum_liikenne_tco2 / NULLIF(sum_yhteensa_tco2, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_liikenne_tco2_per_asukas = (sum_liikenne_tco2 / NULLIF(pop, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET liikenne_hlo_tco2_per_sum_liikenne_tco2 = (liikenne_hlo_tco2 / NULLIF(sum_liikenne_tco2, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET liikenne_hlo_tco2_per_sum_yhteensa_tco2 = (liikenne_hlo_tco2 / NULLIF(sum_yhteensa_tco2, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET liikenne_hlo_tco2_per_asukas = (liikenne_hlo_tco2 / NULLIF(pop, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET liikenne_hlo_tco2_per_tp = (liikenne_hlo_tco2 / NULLIF(employ, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
   
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET liikenne_hlo_tco2_per_as_tp = (liikenne_hlo_tco2 / NULLIF(COALESCE(pop, 0) + COALESCE(employ, 0), 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateRelativeTrafficEmissionsToDatabase(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True

    def calculatePopJobMix(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN pop_per_popjob_percentage numeric(10, 1)"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET pop_per_popjob_percentage = (COALESCE(pop, 0)::real / NULLIF(COALESCE(pop, 0) + COALESCE(employ, 0), 0) * 100)"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)


        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculatePopJobMix(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True



    def calculateEmissionsPerFloorSpaceSquares(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_yhteensa_tco2_per_kem real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_kem = (sum_yhteensa_tco2 / NULLIF(floorspace, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateEmissionsPerFloorSpaceSquares(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def calculateEmissionsPerPersonJob(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_yhteensa_tco2_per_as_tp real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_as_tp = (sum_yhteensa_tco2 / NULLIF(COALESCE(pop, 0) + COALESCE(employ, 0), 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        
        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateEmissionsPerPersonJob(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True

    def calculateEmissionsPerPerson(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_yhteensa_tco2_per_asukas real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_asukas = (sum_yhteensa_tco2 / NULLIF(pop, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateEmissionsPerPerson(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def calculateEmissionsPerJob(self, uid, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_yhteensa_tco2_per_tp real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_tp = (sum_yhteensa_tco2 / NULLIF(employ, 0))"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateEmissionsPerJob(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        conn.commit()

        return True


    def createCalculateFutureJobsQueries(self, uid, outputSchemaName, outputTableName):
        '''calculate change in workplaces for each square and update tp_yht accordingly'''
        # should include municipality code in the future zoning areas and take into account in the future jobs calculation
        # take into note that there can be difference between the calculation year (now) and
        #  - the YKR workplace data (old) and
        #  - future zoning data (a zone starting earlier than the calculation year (now))

        md = self.mainDialog

        queries = []

        futureZoningAreasSchemaTableName = self.ykrToolDictionaries.getPredefinedFutureZoningAreasDatabaseTableName(md.comboBoxPredefinedFutureAreas.currentText())
        futureZoningAreasSchemaName, futureZoningAreasTableName = futureZoningAreasSchemaTableName.replace('"', '').split('.')

        # Tee taulu työpaikkojen määrän laskemisen avuksi
        query = """CREATE TABLE user_output.\"{}_job_temp\"(
            id serial PRIMARY KEY,
            geom geometry(MultiPolygon, 3067) NOT NULL,
            xyind varchar NOT NULL,
            mun int4 NOT NULL,
            vuosi date NOT NULL,
            tp_vali_muutos integer DEFAULT 0,
            tp_vuosi_muutos real DEFAULT 0)
            """.format(uid)
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        # query = "ALTER TABLE user_output.\"" + uid + "_job_temp\" ADD COLUMN tp_vali_muutos integer"
        # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)

        years = range(self.sessionParams['baseYear'], self.targetYear + 1)

        # Lisää kullekin vuodelle oma rivinsä
        for year in years:
            query = """INSERT INTO user_output.\"{}_job_temp\"(geom, xyind, mun, vuosi)
                (SELECT geom, xyind, mun, to_date('{}-01-01', 'YYYY-MM-DD') FROM {})""".format(uid, year, "\"" + outputSchemaName.replace('"', '') + "\".\"" + outputTableName.replace('"', '') + "\"")
            # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
            # query = "ALTER TABLE user_output.\"" + uid + "_job_temp\" ADD COLUMN tp_vuosi_muutos_{} integer".format(year)
            # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            # queries.append(query)
        
        # Laske kullekin vuodelle tuleva työpaikkojen muutos
        for year in years:
            query = """UPDATE user_output.\"{}_job_temp\" AS output_bau 
                SET tp_vuosi_muutos = (
                    SELECT COALESCE(SUM((ST_Area(
                        ST_Intersection(
                            output_bau.geom, kt_bau.geom
                        )
                    ) / ST_Area(kt_bau.geom)) *
		            ( 1.0 / (kt_bau.k_valmisv - kt_bau.k_aloitusv + 1)) *
                    kt_bau.k_tp_yht), 0)
                    FROM 
                    {} AS kt_bau 
                    WHERE
                        kt_bau.k_tp_yht > 0 AND 
                        date_part('year', output_bau.vuosi) >= kt_bau.k_aloitusv AND 
                        date_part('year', output_bau.vuosi) <= kt_bau.k_valmisv AND 
                        ST_Intersects(output_bau.geom, kt_bau.geom)
                )""".format(uid, "\"" + futureZoningAreasSchemaName + "\".\"" + futureZoningAreasTableName + "\"")
            # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
                    
        # summaa työpaikkamuutokset yhteen ja tallenna summa kullekin ruudulle omaan sarakkeeseensa kohdevuodelle
        query = """UPDATE user_output.\"{}_job_temp\" AS output_bau SET tp_vali_muutos = (
            SELECT SUM(tp_vuosi_muutos)
            FROM user_output.\"{}_job_temp\" AS b
            WHERE (date_part('year', output_bau.vuosi) = {})
            AND output_bau.xyind = b.xyind
            AND b.vuosi <= output_bau.vuosi
            )""".format(uid, uid, self.targetYear)
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        ## päivitä työpaikat kohdevuodelle alkuhetken työpaikoista ja työpaikkojen muutossummasta
        query = """UPDATE {} AS result_table SET tp_yht = (
	        SELECT output_bau.tp_vali_muutos + COALESCE(result_table.tp_yht, 0)
            FROM user_output.\"{}_job_temp\" AS output_bau
            WHERE (date_part('year', output_bau.vuosi) = {} AND result_table.xyind = output_bau.xyind AND result_table.mun = output_bau.mun)
            )""".format("\"" + outputSchemaName.replace('"', '') + "\".\"" + outputTableName.replace('"', '') + "\"", uid, self.targetYear)
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        # DROP temp TABLE
        query = "DROP TABLE user_output.\"{}_job_temp\"".format(uid)
        queries.append(query)

        return queries


    def zeroCO2inNokianMyllySquare(self, outputSchemaName, outputTableName, retriesLeft=3):
        # name = str(uuid.uuid4())
        # layer = QgsVectorLayer(uri.uri(False), name, 'postgres')

        queries = []

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sum_yhteensa_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sum_lammonsaato_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sum_liikenne_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sum_sahko_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sum_rakentaminen_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET tilat_vesi_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET tilat_lammitys_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET tilat_jaahdytys_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sahko_kiinteistot_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sahko_kotitaloudet_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sahko_palv_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sahko_tv_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET liikenne_as_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET liikenne_tp_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        # query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET liikenne_hlo_tco2 = 0 WHERE xyind = '3141256822125'"
        # # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET liikenne_tv_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET liikenne_palv_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET rak_korjaussaneeraus_tco2 = 0 WHERE xyind = '3141256822125'"
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET rak_korjaussaneeraus_tco2 = 0 WHERE xyind = '3141256822125'"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.zeroCO2inNokianMyllySquare(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        conn.commit()

        return True


    def calculateSumOfPersonalTraffic(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN liikenne_hlo_tco2 real"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET liikenne_hlo_tco2 = (liikenne_as_tco2 + liikenne_tp_tco2)"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateSumOfPersonalTraffic(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def cleanUpSession(self):

        if self.rememberCalculationSettingsBetweenRuns == False:
            # * if true then nothing to do
            # * if false then set the settings according to the QT Dialog (.ui) default settings at the end of the calculation run
            #    (* also reset to default settings button sets the settings according to the QT Dialog (.ui) default settings)
            self.restoreDefaultCalculationSettings()

        '''Delete temporary data and close db connection'''
        # for table in list(self.tableNames.values()):
        #     if not table: continue
        #     try:
        #         self.cur.execute('DROP TABLE user_input."{}"'.format(table.lower()))
        #         self.conn.commit()
        #     except Exception as e:
        #         self.iface.messageBar().pushMessage(
        #              self.tr('Error in removing temporary table ') + '{}'.format(table),
        #             str(e), Qgis.Warning, duration=0)
        #         self.conn.rollback()

        if self.conn != None:
            self.conn.close()

    def postError(self):
        '''Called after querytask is terminated. Closes session'''
        self.cur.execute('DROP TABLE IF EXISTS user_input."ykr_{}"'.format(self.sessionParams['uuid']))
        self.cleanUpSession()
        self.iface.messageBar().pushMessage(self.tr('Error in performing calculation'),\
            self.tr('See further info in the error log'), Qgis.Critical, duration=0)

    # def runYkrSummaryStatistics(self):
    #     '''Run summary statistics for YKR grid'''
    #     self.iface.messageBar().pushMessage(self.tr('Creating summary statistics'),\
    #         self.tr('This may take a while'), Qgis.Info, duration=0)
    #     self.ykrZonesStats.calculateYKRZoneEmissions('3c250050-0a4d-4726-b3f5-26e8456e2992', 'user_output', 'output_dev_3c250050-0a4d-4726-b3f5-26e8456e2992')
    #     self.iface.messageBar().pushMessage(self.tr('Summary statistics ready'), Qgis.Info, duration=0)
