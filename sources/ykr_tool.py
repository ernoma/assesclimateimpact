# -*- coding: utf-8 -*-
"""
/***************************************************************************
 YKRTool
                                 A QGIS plugin
 Tampereen tulevaisuuden yhdyskuntarakenteen CO2 Emissions Tool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-05
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Gispo Ltd.
        email                : mikael@gispo.fi
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5 import uic
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

from qgis.core import (Qgis, QgsVectorLayer, QgsCoordinateReferenceSystem,
    QgsApplication, QgsDataSourceUri, QgsProject, QgsTaskManager,
    QgsProcessingAlgRunnerTask, QgsProcessingContext, QgsProcessingFeedback, QgsMessageLog)
from qgis.gui import QgsFileWidget
from functools import partial

# Initialize Qt resources from file resources.py
from ..resources import *
# Import the code for the dialog
import processing
import uuid
import os.path
import psycopg2
import datetime, getpass
import traceback
from configparser import ConfigParser
from .ykr_tool_dictionaries import YKRToolDictionaries
from .ykr_tool_tasks import QueryTask
from .createdbconnection import createDbConnection
from .ykr_tool_upload_layer import YKRToolUploadLayer

class YKRTool:
    """QGIS Plugin Implementation."""

    MAX_TABLE_NAME_LENGTH = 62

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.split(os.path.dirname(__file__))[0]
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'YKRTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CO2 Emissions Tool')

        self.conn = None
        self.connParams = None

        configFilePath = QSettings().value("/YKRTool/configFilePath", "", type=str)
        if configFilePath != "":
            self.connParams = self.parseConfigFile(configFilePath)

        self.tableNames = {}

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.mainDialog = uic.loadUi(os.path.join(self.plugin_dir, 'ui', 'ykr_tool_main.ui'))
        self.settingsDialog = uic.loadUi(os.path.join(self.plugin_dir, 'ui', 'ykr_tool_db_settings.ui'))
        self.infoDialog = uic.loadUi(os.path.join(self.plugin_dir, 'ui', 'ykr_tool_info.ui'))

        self.targetYear = None
        self.ykrPopLayer = None
        self.ykrBuildingsLayer = None
        self.ykrJobsLayer = None

        self.ykrToolDictionaries = YKRToolDictionaries(self.iface, locale)
        self.ykrToolUploadLayer = YKRToolUploadLayer(self.iface)

        self.futureAreasLayer = None
        self.investigatedAreaMapLayer = None
        self.predefinedAreaDBTableName = None

        self.futureNetworkLayer = None
        self.futureStopsLayer = None
        self.futureNetworkLayerDBTableName = None
        self.futureStopsLayerDBTableName = None

        self.calculateFuture = False


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('YKRTool', message)


    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ykr_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CO2 Emissions Tool'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CO2 Emissions Tool'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.setupMainDialog()

        self.mainDialog.show()

        # Run the dialog event loop
        result = self.mainDialog.exec_()
        # See if OK was pressed
        if result:
            self.runProcess()

    def runProcess(self, retriesLeft=0):
        try:
            self.preProcess()
        except Exception as e:
            if retriesLeft > 0:
                return self.runProcess(retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(self.tr('Error in preprocessing'),
                    str(e), Qgis.Critical, duration=0)
                self.cleanUpSession()
                return False

        return True


    def preProcess(self):
        '''Starts calculation'''
        if not self.connParams:
            configFilePath = QSettings().value("/YKRTool/configFilePath", "", type=str)
            self.connParams = self.parseConfigFile(configFilePath)
        self.conn = createDbConnection(self.connParams)
        self.cur = self.conn.cursor()
        self.sessionParams = self.generateSessionParameters()
        self.readProcessingInput()


    def setupMainDialog(self):
        '''Sets up the main dialog'''
        md = self.mainDialog

        md.radioButtonUseMapLayer.clicked.connect(self.handleRadioButtonUseMapLayerToggle)
        md.radioButtonUsePredefinedArea.clicked.connect(self.handleRadioButtonUsePredefinedAreaToggle)

        names = self.ykrToolDictionaries.getPredefinedAreaNames()
        md.comboBoxPredefinedArea.addItems(names)

        names = self.ykrToolDictionaries.getPITKOScenarioNames()
        md.pitkoScenario.addItems(names)

        names = self.ykrToolDictionaries.getEmissionAllocationMethodNames()
        md.emissionsAllocation.addItems(names)

        names = self.ykrToolDictionaries.getElectricityTypeNames()
        md.elecEmissionType.addItems(names)

        #md.checkBoxOnlySelectedFeats.setEnabled(False)
        md.futureBox.setEnabled(False)
        names = self.ykrToolDictionaries.getPredefinedFutureZoningAreasUserFriendlyNames()
        md.comboBoxPredefinedFutureAreas.addItems(names)

        # names = self.ykrToolDictionaries.getPredefinedUrbanCenterLayersUserFriendlyNames()
        # md.comboBoxPredefinedFutureNetwork.addItems(names)

        names = self.ykrToolDictionaries.getYkrPopUserFriendlyNames()
        md.comboBoxYkrPop.addItems(names)
        names = self.ykrToolDictionaries.getYkrJobUserFriendlyNames()
        md.comboBoxYkrJob.addItems(names)

        md.settingsButton.clicked.connect(self.displaySettingsDialog)
        md.infoButton.clicked.connect(lambda: self.infoDialog.show())

        # md.ykrPopLayerList.hide()
        # md.ykrJobsLayerList.hide()
        # md.ykrBuildingsLayerList.hide()
        md.futureAreasLayerList.hide()
        md.futureNetworkLayerList.hide()
        md.futureStopsLayerList.hide()

        # md.ykrPopLoadLayer.clicked.connect(self.handleLayerToggle)
        # md.ykrJobsLoadLayer.clicked.connect(self.handleLayerToggle)
        # md.ykrBuildingsLoadLayer.clicked.connect(self.handleLayerToggle)
        md.futureAreasLoadLayer.clicked.connect(self.handleLayerToggle)
        md.futureNetworkLoadLayer.clicked.connect(self.handleLayerToggle)
        md.futureStopsLoadLayer.clicked.connect(self.handleLayerToggle)

        md.checkBoxCalculateFuture.clicked.connect(self.handleLayerToggle)

        md.checkBoxCalculateEmissionsPerPerson.clicked.connect(self.handleCalculateEmissionsPerPersonToggle)
        md.checkBoxCalculateEmissionsPerJob.clicked.connect(self.handleCalculateEmissionsPerJobToggle)


    def handleCalculateEmissionsPerPersonToggle(self, checked):
        md = self.mainDialog

        if checked:
            md.comboBoxYkrPop.setEnabled(True)
            # mapLayerComboBoxYkrPop.setEnabled(True)
            # checkBoxLoadYkrPopFromMapLayer.setEnabled(True)
        else:
            md.comboBoxYkrPop.setEnabled(False)
            # mapLayerComboBoxYkrPop.setEnabled(False)
            # checkBoxLoadYkrPopFromMapLayer.setEnabled(False)


    def handleCalculateEmissionsPerJobToggle(self, checked):
        md = self.mainDialog

        if checked:
            md.comboBoxYkrJob.setEnabled(True)
            # mapLayerComboBoxYkrJob.setEnabled(True)
            # checkBoxLoadYkrJobFromMapLayer.setEnabled(True)
        else:
            md.comboBoxYkrJob.setEnabled(False)
            # mapLayerComboBoxYkrJob.setEnabled(False)
            # checkBoxLoadYkrJobFromMapLayer.setEnabled(False)


    def handleRadioButtonUseMapLayerToggle(self, checked):
        md = self.mainDialog

        if checked:
            md.comboBoxMapLayer.setEnabled(True)
            md.mapLayerLabel.setEnabled(True)
            md.checkBoxAllowOtherUsersToUseUploadedMapLayer.setEnabled(True)
            md.checkBoxUploadOnlySelectedFeatures.setEnabled(True)
            md.comboBoxPredefinedArea.setEnabled(False)
            md.predefinedAreaLabel.setEnabled(False)
        else:
            md.comboBoxMapLayer.setEnabled(False)
            md.mapLayerLabel.setEnabled(False)
            md.checkBoxAllowOtherUsersToUseUploadedMapLayer.setEnabled(False)
            md.checkBoxUploadOnlySelectedFeatures.setEnabled(False)
            md.comboBoxPredefinedArea.setEnabled(True)
            md.predefinedAreaLabel.setEnabled(True)


    def handleRadioButtonUsePredefinedAreaToggle(self, checked):
        md = self.mainDialog

        if checked:
            md.comboBoxMapLayer.setEnabled(False)
            md.mapLayerLabel.setEnabled(False)
            md.checkBoxAllowOtherUsersToUseUploadedMapLayer.setEnabled(False)
            md.checkBoxUploadOnlySelectedFeatures.setEnabled(False)
            md.comboBoxPredefinedArea.setEnabled(True)
            md.predefinedAreaLabel.setEnabled(True)
        else:
            md.comboBoxMapLayer.setEnabled(True)
            md.mapLayerLabel.setEnabled(True)
            md.checkBoxAllowOtherUsersToUseUploadedMapLayer.setEnabled(True)
            md.checkBoxUploadOnlySelectedFeatures.setEnabled(True)
            md.comboBoxPredefinedArea.setEnabled(False)
            md.predefinedAreaLabel.setEnabled(False)


    def displaySettingsDialog(self):
        '''Sets up and displays the settings dialog'''
        self.settingsDialog.show()
        self.settingsDialog.configFileInput.setStorageMode(QgsFileWidget.GetFile)
        self.settingsDialog.configFileInput.setFilePath(QSettings().value\
            ("/YKRTool/configFilePath", "", type=str))
        self.settingsDialog.loadFileButton.clicked.connect(self.setConnectionParamsFromFile)

        result = self.settingsDialog.exec_()
        if result:
            self.connParams = self.readConnectionParamsFromInput()

    def setConnectionParamsFromFile(self):
        '''Reads connection parameters from file and sets them to the input fields'''
        filePath = self.settingsDialog.configFileInput.filePath()
        QSettings().setValue("/YKRTool/configFilePath", filePath)

        try:
            dbParams = self.parseConfigFile(filePath)
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in reading a file'),\
                str(e), Qgis.Warning, duration=10)

        self.setConnectionParamsFromInput(dbParams)

    def parseConfigFile(self, filePath):
        '''Reads configuration file and returns parameters as a dict'''
        # Setup an empty dict with correct keys to avoid keyerrors
        dbParams = {
            'host': '',
            'port': '',
            'database': '',
            'user': '',
            'password': ''
        }
        if not os.path.exists(filePath):
            self.iface.messageBar().pushMessage(self.tr('Error'), self.tr('File could not be read'),\
                Qgis.Warning)
            return dbParams

        parser = ConfigParser()
        parser.read(filePath)
        if parser.has_section('postgresql'):
            params = parser.items('postgresql')
            for param in params:
                dbParams[param[0]] = param[1]
        else:
            self.iface.messageBar().pushMessage(self.tr('Error'), self.tr('File does not contain database connection parameters'), Qgis.Warning)

        return dbParams

    def setConnectionParamsFromInput(self, params):
        '''Sets connection parameters to input fields'''
        self.settingsDialog.dbHost.setValue(params['host'])
        self.settingsDialog.dbPort.setValue(params['port'])
        self.settingsDialog.dbName.setValue(params['database'])
        self.settingsDialog.dbUser.setValue(params['user'])
        self.settingsDialog.dbPass.setText(params['password'])

    def readConnectionParamsFromInput(self):
        '''Reads connection parameters from user input and returns a dictionary'''
        params = {}
        params['host'] = self.settingsDialog.dbHost.value()
        params['port'] = self.settingsDialog.dbPort.value()
        params['database'] = self.settingsDialog.dbName.value()
        params['user'] = self.settingsDialog.dbUser.value()
        params['password'] = self.settingsDialog.dbPass.text()
        return params

    def handleLayerToggle(self):
        '''Toggle UI components visibility based on selection'''
        # if self.mainDialog.ykrPopLoadLayer.isChecked():
        #     self.mainDialog.ykrPopLayerList.show()
        #     self.mainDialog.ykrPopFile.hide()
        # else:
        #     self.mainDialog.ykrPopLayerList.hide()
        #     self.mainDialog.ykrPopFile.show()
        # if self.mainDialog.ykrJobsLoadLayer.isChecked():
        #     self.mainDialog.ykrJobsLayerList.show()
        #     self.mainDialog.ykrJobsFile.hide()
        # else:
        #     self.mainDialog.ykrJobsLayerList.hide()
        #     self.mainDialog.ykrJobsFile.show()
        # if self.mainDialog.ykrBuildingsLoadLayer.isChecked():
        #     self.mainDialog.ykrBuildingsLayerList.show()
        #     self.mainDialog.ykrBuildingsFile.hide()
        # else:
        #     self.mainDialog.ykrBuildingsLayerList.hide()
        #     self.mainDialog.ykrBuildingsFile.show()
        if self.mainDialog.futureAreasLoadLayer.isChecked():
            self.mainDialog.futureAreasLayerList.show()
            self.mainDialog.comboBoxPredefinedFutureAreas.hide()
        else:
            self.mainDialog.futureAreasLayerList.hide()
            self.mainDialog.comboBoxPredefinedFutureAreas.show()

        if self.mainDialog.futureNetworkLoadLayer.isChecked():
            self.mainDialog.futureNetworkLayerList.show()
            self.mainDialog.comboBoxPredefinedFutureNetwork.hide()
        else:
            self.mainDialog.futureNetworkLayerList.hide()
            self.mainDialog.comboBoxPredefinedFutureNetwork.show()

        if self.mainDialog.futureStopsLoadLayer.isChecked():
            self.mainDialog.futureStopsLayerList.show()
            self.mainDialog.comboBoxPredefinedFutureStops.hide()
        else:
            self.mainDialog.futureStopsLayerList.hide()
            self.mainDialog.comboBoxPredefinedFutureStops.show()

        if self.mainDialog.checkBoxCalculateFuture.isChecked():
            self.mainDialog.futureBox.setEnabled(True)
            self.mainDialog.futureRequired.setEnabled(True)
            self.mainDialog.futureOptional.setEnabled(True)
            self.mainDialog.comboBoxPredefinedFutureAreas.setEnabled(True)
            self.mainDialog.futureAreasLayerList.setEnabled(True)
            self.mainDialog.comboBoxPredefinedFutureNetwork.setEnabled(True)
            self.mainDialog.futureNetworkLayerList.setEnabled(True)
            self.mainDialog.comboBoxPredefinedFutureStops.setEnabled(True)
            self.mainDialog.futureStopsLayerList.setEnabled(True)
        else:
            self.mainDialog.futureBox.setEnabled(False)
            self.mainDialog.futureRequired.setEnabled(False)
            self.mainDialog.futureOptional.setEnabled(False)
            self.mainDialog.comboBoxPredefinedFutureAreas.setEnabled(False)
            self.mainDialog.futureAreasLayerList.setEnabled(False)
            self.mainDialog.comboBoxPredefinedFutureNetwork.setEnabled(False)
            self.mainDialog.futureNetworkLayerList.setEnabled(False)
            self.mainDialog.comboBoxPredefinedFutureStops.setEnabled(False)
            self.mainDialog.futureStopsLayerList.setEnabled(False)


    def generateSessionParameters(self):
        '''Get necessary values for processing session'''
        sessionParams = {}

        usr = getpass.getuser()
        sessionParams["user"] = usr.replace(" ", "_")
        now = datetime.datetime.now()
        sessionParams["startTime"] = now.strftime("%Y%m%d_%H%M%S")
        sessionParams["baseYear"] = now.year
        sessionParams["uuid"] = str(uuid.uuid4())

        return sessionParams


    def readProcessingInput(self):
        '''Read user input from main dialog'''
        md = self.mainDialog
        self.inputLayers = []
        # if md.ykrPopLoadLayer.isChecked():
        #     self.ykrPopLayer = md.ykrPopLayerList.currentLayer()
        # else:
        #     self.ykrPopLayer = QgsVectorLayer(md.ykrPopFile.filePath(),
        #         "ykr_vaesto", "ogr")
        # if md.ykrBuildingsLoadLayer.isChecked():
        #     self.ykrBuildingsLayer = md.ykrBuildingsLayerList.currentLayer()
        # else:
        #     self.ykrBuildingsLayer = QgsVectorLayer(
        #         md.ykrBuildingsFile.filePath(), "rakennukset_piste", "ogr")
        # if md.ykrJobsLoadLayer.isChecked():
        #     self.ykrJobsLayer = md.ykrJobsLayerList.currentLayer()
        # else:
        #     self.ykrJobsLayer = QgsVectorLayer(
        #         md.ykrJobsFile.filePath(), "ykr_tyopaikat", "ogr")
        # self.inputLayers.extend([self.ykrPopLayer,
        #     self.ykrJobsLayer, self.ykrBuildingsLayer])

        if md.radioButtonUseMapLayer.isChecked():
            self.predefinedAreaDBTableName = None
            self.investigatedAreaMapLayer = md.comboBoxMapLayer.currentLayer()
            if self.investigatedAreaMapLayer == None:
                raise Exception(self.tr("Investigation area map layer has not been selected"))
            elif not self.investigatedAreaMapLayer.isValid():
                raise Exception(self.tr("Investigation area map layer is not valid"))
            dataProvider = self.investigatedAreaMapLayer.dataProvider()
            dataSourceUri = dataProvider.dataSourceUri()
            # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
            uri = dataProvider.uri()
            # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
            # QgsMessageLog.logMessage("host: {}".format(uri.host()) , 'YKRTool', Qgis.Info)
            # if uri.host() == "":
                # QgsMessageLog.logMessage("host = \"\"", 'YKRTool', Qgis.Info)
            # QgsMessageLog.logMessage("database: {}".format(uri.database()) , 'YKRTool', Qgis.Info)
            # if uri.database() == "":
                # QgsMessageLog.logMessage("database = \"\"", 'YKRTool', Qgis.Info)
            if uri.host() == "" or uri.host() != self.connParams['host'] or uri.database() == "" or uri.database() != self.connParams['database']:
                self.predefinedAreaDBTableName = 'user_input.' + '"' + self.investigatedAreaMapLayer.name()[:YKRTool.MAX_TABLE_NAME_LENGTH] + '"'
                self.ykrToolUploadLayer.copySourceLayerFeaturesToTargetTable(self.connParams, self.investigatedAreaMapLayer, self.predefinedAreaDBTableName, md.checkBoxAllowOtherUsersToUseUploadedMapLayer.isChecked(), md.checkBoxUploadOnlySelectedFeatures.isChecked())
            else:
                self.investigatedAreaMapLayer = None
                QgsMessageLog.logMessage("schema: {}".format(uri.schema()) , 'YKRTool', Qgis.Info)
                QgsMessageLog.logMessage("quotedTablename: {}".format(uri.quotedTablename()) , 'YKRTool', Qgis.Info)
                self.predefinedAreaDBTableName = uri.quotedTablename()
        else:
            self.investigatedAreaMapLayer = None
            self.predefinedAreaDBTableName = self.ykrToolDictionaries.getPredefinedAreaDatabaseTableName(md.comboBoxPredefinedArea.currentText())

        self.finishReadingProcessingInput()


    def finishReadingProcessingInput(self):
        md = self.mainDialog

        # self.onlySelectedFeats = md.checkBoxUploadOnlySelectedFeatures.isChecked()
        self.pitkoScenario = self.ykrToolDictionaries.getPITKOScenarioShortName(md.pitkoScenario.currentText())
        self.emissionsAllocation = self.ykrToolDictionaries.getEmissionAllocationMethodShortName(md.emissionsAllocation.currentText())
        self.elecEmissionType = self.ykrToolDictionaries.getElectricityTypeShortName(md.elecEmissionType.currentText())

        if not md.checkBoxCalculateFuture.isChecked():
            self.calculateFuture = False
        else:
            self.readFutureProcessingInput()

        # self.uploadInputLayers()
        # QgsMessageLog.logMessage("predefinedAreaDBTableName: {}".format(self.predefinedAreaDBTableName), 'YKRTool', Qgis.Info)

        self.runCalculation()


    def readFutureProcessingInput(self):
        '''Reads user input for future processing from main dialog'''
        self.calculateFuture = True
        md = self.mainDialog

        if md.futureAreasLoadLayer.isChecked():
            self.futureAreasLayer = md.futureAreasLayerList.currentLayer()
        else:
            futureZoningAreasTableName = self.ykrToolDictionaries.getPredefinedFutureZoningAreasDatabaseTableName(md.comboBoxPredefinedFutureAreas.currentText())
            schemaName, tableName = futureZoningAreasTableName.split('.')
            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(schemaName, tableName, 'geom')
            self.futureAreasLayer = QgsVectorLayer(uri.uri(False), "aluevaraus_tulevaisuus", 'postgres')
            # QgsMessageLog.logMessage("futureAreasLayer: " +  str(self.futureAreasLayer), 'YKRTool', Qgis.Info)

        self.inputLayers.append(self.futureAreasLayer)

        if md.futureNetworkLoadLayer.isChecked():
            self.futureNetworkLayer = md.futureNetworkLayerList.currentLayer()
            if self.futureNetworkLayer == None:
                raise Exception(self.tr("Future urban center map layer has not been selected"))
            elif not self.futureNetworkLayer.isValid():
                raise Exception(self.tr("Future urban center map layer is not valid"))
            else:
                dataProvider = self.futureNetworkLayer.dataProvider()
                dataSourceUri = dataProvider.dataSourceUri()
                # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
                uri = dataProvider.uri()
                # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
                # QgsMessageLog.logMessage("host: {}".format(uri.host()) , 'YKRTool', Qgis.Info)
                # if uri.host() == "":
                    # QgsMessageLog.logMessage("host = \"\"", 'YKRTool', Qgis.Info)
                # QgsMessageLog.logMessage("database: {}".format(uri.database()) , 'YKRTool', Qgis.Info)
                # if uri.database() == "":
                # QgsMessageLog.logMessage("database = \"\"", 'YKRTool', Qgis.Info)
                if uri.host() == "" or uri.host() != self.connParams['host'] or uri.database() == "" or uri.database() != self.connParams['database']:
                    self.futureNetworkLayerDBTableName = 'user_input.' + '"' + self.futureNetworkLayer.name()[:YKRTool.MAX_TABLE_NAME_LENGTH] + '"'
                    self.ykrToolUploadLayer.copyFutureNetworkSourceLayerFeaturesToTargetTable(self.connParams, self.futureNetworkLayer, self.futureNetworkLayerDBTableName)
                else:
                    self.futureNetworkLayer = None
                    QgsMessageLog.logMessage("schema: {}".format(uri.schema()) , 'YKRTool', Qgis.Info)
                    QgsMessageLog.logMessage("quotedTablename: {}".format(uri.quotedTablename()) , 'YKRTool', Qgis.Info)
                    self.futureNetworkLayerDBTableName = uri.quotedTablename()
            # self.inputLayers.append(self.futureNetworkLayer)
        else:
            self.futureNetworkLayer = None
            self.futureNetworkLayerDBTableName = None

        if md.futureStopsLoadLayer.isChecked():
            self.futureStopsLayer = md.futureStopsLayerList.currentLayer()
            # self.inputLayers.append(self.futureStopsLayer)
            if self.futureStopsLayer == None:
                raise Exception(self.tr("Future public transit stops map layer has not been selected"))
            elif not self.futureStopsLayer.isValid():
                raise Exception(self.tr("Future public transit stops map layer is not valid"))
            else:
                dataProvider = self.futureStopsLayer.dataProvider()
                dataSourceUri = dataProvider.dataSourceUri()
                # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
                uri = dataProvider.uri()
                # QgsMessageLog.logMessage("dataSourceUri: {}".format(dataProvider.dataSourceUri()), 'YKRTool', Qgis.Info)
                # QgsMessageLog.logMessage("host: {}".format(uri.host()) , 'YKRTool', Qgis.Info)
                # if uri.host() == "":
                    # QgsMessageLog.logMessage("host = \"\"", 'YKRTool', Qgis.Info)
                # QgsMessageLog.logMessage("database: {}".format(uri.database()) , 'YKRTool', Qgis.Info)
                # if uri.database() == "":
                # QgsMessageLog.logMessage("database = \"\"", 'YKRTool', Qgis.Info)
                if uri.host() == "" or uri.host() != self.connParams['host'] or uri.database() == "" or uri.database() != self.connParams['database']:
                    self.futureStopsLayerDBTableName = 'user_input.' + '"' + self.futureStopsLayer.name()[:YKRTool.MAX_TABLE_NAME_LENGTH] + '"'
                    self.ykrToolUploadLayer.copyFutureStopsSourceLayerFeaturesToTargetTable(self.connParams, self.futureStopsLayer, self.futureStopsLayerDBTableName)
                else:
                    self.futureStopsLayer = None
                    QgsMessageLog.logMessage("schema: {}".format(uri.schema()) , 'YKRTool', Qgis.Info)
                    QgsMessageLog.logMessage("quotedTablename: {}".format(uri.quotedTablename()) , 'YKRTool', Qgis.Info)
                    self.futureStopsLayerDBTableName = uri.quotedTablename()
        else:
             self.futureStopsLayer = None
             self.futureStopsLayerDBTableName = None

        self.targetYear = md.targetYear.value()


    def checkLayerValidity(self):
        '''Checks that necessary layers are valid and raise an exception if needed'''
        # if not self.ykrPopLayer.isValid():
        #     raise Exception("Virhe ladattaessa nykytilanteen YKR-väestötasoa")
        # if not self.ykrBuildingsLayer.isValid():
        #     raise Exception("Virhe ladattaessa nykytilanteen YKR-rakennustasoa")
        # if not self.ykrJobsLayer.isValid():
        #     raise Exception("Virhe ladattaessa nykytilanteen YKR-työpaikkatasoa")
        if self.calculateFuture:
            self.checkFutureLayerValidity()


    def checkFutureLayerValidity(self):
        '''Checks if future calculation input layers are valid'''
        if not self.futureAreasLayer.isValid():
            raise Exception(self.tr("Future zoning areas layer is not valid"))
        if self.futureNetworkLayer:
            if self.futureNetworkLayer != None and not self.futureNetworkLayer.isValid():
                raise Exception(self.tr("Urban center layer is not valid"))
        if self.futureStopsLayer:
            if self.futureStopsLayer != None and not self.futureStopsLayer.isValid():
                raise Exception(self.tr("Public transit stops layer is not valid"))


    # def uploadSingleMapLayer(self, layer):
    #     '''Uploads a single input layer to database'''
    #     alg = QgsApplication.processingRegistry().algorithmById(
    #         'gdal:importvectorintopostgisdatabasenewconnection')
    #     params = {
    #         'A_SRS': QgsCoordinateReferenceSystem('EPSG:3067'),
    #         'T_SRS': None,
    #         'S_SRS': None,
    #         'HOST': self.connParams['host'],
    #         'PORT': self.connParams['port'],
    #         'USER': self.connParams['user'],
    #         'DBNAME': self.connParams['database'],
    #         'PASSWORD': self.connParams['password'],
    #         'SCHEMA': 'user_input',
    #         'PK': 'fid',
    #         'PRIMARY_KEY': None,
    #         'PROMOTETOMULTI': False
    #     }
    #     context = QgsProcessingContext()
    #     feedback = QgsProcessingFeedback()
    #     params['INPUT'] = layer
    #     tableName = layer.name()
    #     params['TABLE'] = tableName[:YKRTool.MAX_TABLE_NAME_LENGTH] # truncate tablename to under 63c
    #     self.tableNames[layer] = params['TABLE']
    #     if int(str(layer.wkbType())[:1]) == 3: # polygon
    #         params['GTYPE'] = 5
    #     elif int(str(layer.wkbType())[:1]) == 6: # MultiPolygon
    #         params['GTYPE'] = 8
    #     task = QgsProcessingAlgRunnerTask(alg, params, context, feedback)
    #     task.executed.connect(partial(self.uploadSingleMapLayerFinished, context))
    #     QgsApplication.taskManager().addTask(task)
    #     self.iface.messageBar().pushMessage('Ladataan tasoa tietokantaan',
    #         layer.name(), Qgis.Info, duration=3)


    # def uploadSingleMapLayerFinished(self, context, successful, results):
    #     if not successful:
    #         self.iface.messageBar().pushMessage('Virhe',
    #         'Virhe ladattaessa tasoa tietokantaan', Qgis.Warning, duration=0)
    #     else:
    #         self.finishReadingProcessingInput()

    
    def uploadInputLayers(self):
        '''Write layers to database'''
        self.layerUploadIndex = 0
        self.uploadInputLayer()

    def uploadInputLayer(self):
        '''Uploads an input layer to database'''
        alg = QgsApplication.processingRegistry().algorithmById(
            'gdal:importvectorintopostgisdatabasenewconnection')
        params = {
            'A_SRS': QgsCoordinateReferenceSystem('EPSG:3067'),
            'T_SRS': None,
            'S_SRS': None,
            'HOST': self.connParams['host'],
            'PORT': self.connParams['port'],
            'USER': self.connParams['user'],
            'DBNAME': self.connParams['database'],
            'PASSWORD': self.connParams['password'],
            'SCHEMA': 'user_input',
            'PK': 'fid',
            'PRIMARY_KEY': None,
            'PROMOTETOMULTI': False
        }
        context = QgsProcessingContext()
        feedback = QgsProcessingFeedback()
        layer = self.inputLayers[self.layerUploadIndex]
        if not layer:
            self.tableNames[layer] = False
            self.uploadNextLayer()
        params['INPUT'] = layer
        tableName = self.sessionParams['uuid'] + '_' + layer.name()
        tableName = tableName.replace('-', '_')
        params['TABLE'] = tableName[:49] # truncate tablename to under 63c
        self.tableNames[layer] = params['TABLE']
        if layer.geometryType() == 0: # point
            params['GTYPE'] = 3
        elif layer.geometryType() == 2: # polygon
            params['GTYPE'] = 8
        task = QgsProcessingAlgRunnerTask(alg, params, context, feedback)
        task.executed.connect(partial(self.uploadFinished, context))
        QgsApplication.taskManager().addTask(task)
        self.iface.messageBar().pushMessage(self.tr('Loading layer to the database'),
            layer.name(), Qgis.Info, duration=3)

    def uploadFinished(self, context, successful, results):
        if not successful:
            self.iface.messageBar().pushMessage(self.tr('Error'),
            self.tr('Error in loading layer to the database'), Qgis.Warning, duration=0)
        self.uploadNextLayer()

    def uploadNextLayer(self):
        '''Uploads the next layer in the input layer list'''
        self.layerUploadIndex += 1
        if self.layerUploadIndex < len(self.inputLayers):
            self.uploadInputLayer()
        else:
            self.runCalculation()

    def runCalculation(self):
        '''Runs the main calculation'''
        try:
            queries = self.getCalculationQueries()
            queryTask = QueryTask(self.connParams, queries)
            queryTask.taskCompleted.connect(self.postCalculation)
            queryTask.taskTerminated.connect(self.postError)
            QgsApplication.taskManager().addTask(queryTask)
            self.iface.messageBar().pushMessage(self.tr('Emission calculation'),
                self.tr('Calculating emissions'), Qgis.Info, duration=15)
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in calculation'), str(e), Qgis.Critical, duration=0)
            self.cleanUpSession()
            return False

    def getCalculationQueries(self):
        '''Generate queries to call processing functions in database'''
        vals = {
            'uuid': self.sessionParams['uuid'],
            'aoi': self.predefinedAreaDBTableName,
            # 'geomArea': self.geomArea,
            # 'popTable': (self.tableNames[self.ykrPopLayer]).lower(),
            # 'jobTable': (self.tableNames[self.ykrJobsLayer]).lower(),
            # 'buildingTable': (self.tableNames[self.ykrBuildingsLayer]).lower(),
            'calcYear': self.sessionParams['baseYear'],
            'baseYear': self.sessionParams['baseYear'],
            'pitkoScenario': self.pitkoScenario,
            'emissionsAllocation': self.emissionsAllocation,
            'elecEmissionType': self.elecEmissionType
        }
        queries = []
        if not self.calculateFuture:
            queries.append('''CREATE TABLE user_output."output_{uuid}" AS
            SELECT * FROM CO2_CalculateEmissions('{aoi}', '{calcYear}', '{pitkoScenario}',
            '{emissionsAllocation}', '{elecEmissionType}')'''.format(**vals))
            # queries.append('''CREATE TABLE user_output."output_{uuid}" AS
            # SELECT * FROM il_calculate_emissions('{popTable}', '{jobTable}',
            # '{buildingTable}', '{aoi}', '{calcYear}', '{pitkoScenario}',
            # '{emissionsAllocation}', '{elecEmissionType}', '{geomArea}',
            # '{baseYear}')'''.format(**vals))
            QgsMessageLog.logMessage("getCalculationQueries, not self.calculateFuture", 'YKRTool', Qgis.Info)
        else:
            futureQuery = self.generateFutureQuery(vals)
            queries.append(futureQuery)
        return queries


    def generateFutureQuery(self, vals):
        '''Constructs a query for future calculation'''
        futureZoningAreasTableName = self.ykrToolDictionaries.getPredefinedFutureZoningAreasDatabaseTableName(self.mainDialog.comboBoxPredefinedFutureAreas.currentText())
        futureVals = {
            #'fAreas': (self.tableNames[self.futureAreasLayer]).lower(),
            'fAreas': futureZoningAreasTableName,
            'targetYear': self.targetYear
        }
        vals.update(futureVals)
        query = """CREATE TABLE user_output."output_{uuid}" AS
        SELECT * FROM CO2_CalculateEmissions('{aoi}', '{calcYear}', '{pitkoScenario}', '{emissionsAllocation}', '{elecEmissionType}', '{baseYear}', '{targetYear}', '{fAreas}'""".format(**vals)

        # futureNetworkTableName = (self.tableNames[self.futureNetworkLayer]).lower()
        if self.futureNetworkLayerDBTableName:
            query += ", '{}'".format(self.futureNetworkLayerDBTableName)
        else:
            query += ", NULL"
        # futureStopsTableName = (self.tableNames[self.futureStopsLayer]).lower()
        if self.futureStopsLayerDBTableName:
            query += ", '{}'".format(self.futureStopsLayerDBTableName)
        query += ')'
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        return query


    def postCalculation(self):
        '''Called after QueryTask finishes. Writes session info to sessions table and closes session'''
        try:
            self.writeSessionInfo()
            self.iface.messageBar().pushMessage(self.tr('Ready'), self.tr('Emission calculation ') +\
                str(self.sessionParams['uuid']) + self.tr(' is ready'), Qgis.Success, duration=0)
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in storing session data: '),\
                str(e), Qgis.Warning, duration=0)
            self.conn.rollback()
        try:
            self.addResultAsLayers()
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in adding emissions results to the QGIS: '), str(e), Qgis.Warning, duration=0)
            QgsMessageLog.logMessage(traceback.format_exc(), 'YKRTool', Qgis.Warning)
        try:
            self.cleanUpSession()
        except Exception as e:
            self.iface.messageBar().pushMessage(self.tr('Error in cleaning up: '), str(e), Qgis.Warning, duration=0)


    def writeSessionInfo(self):
        '''Writes session info to user_output.sessions table'''
        uuid = self.sessionParams['uuid']
        user = self.sessionParams['user']
        predefinedAreaName = self.ykrToolDictionaries.getPredefinedAreaNameFromDatabaseTableName(self.predefinedAreaDBTableName)
        startTime = self.sessionParams['startTime']
        baseYear = self.sessionParams['baseYear']
        targetYear = self.targetYear
        pitkoScenario = self.pitkoScenario[:6]
        emissionsAllocation = self.emissionsAllocation
        elecEmissionType = self.elecEmissionType

        self.cur.execute('''INSERT INTO user_output.sessions VALUES (%s, %s, %s, %s, %s,
        %s, %s, %s, %s)''', (uuid, user, startTime, baseYear, targetYear,\
            pitkoScenario, emissionsAllocation, elecEmissionType, predefinedAreaName))
        self.conn.commit()


    def addResultAsLayers(self):
        outputSchemaName = 'user_output'
        outputTableName = 'output_' + self.sessionParams['uuid']
        uid = self.sessionParams['uuid']

        if self.mainDialog.checkBoxNokianMyllyCO2Zeroed.isChecked():
            self.zeroCO2inNokianMyllySquare(outputSchemaName, outputTableName)

        if self.calculateFuture:
            self.updateYearToResultTable(outputSchemaName, outputTableName)

        self.addPopulationToResultsTableIfNeeded(outputSchemaName, outputTableName)
        self.addJobsToResultsTable(uid, outputSchemaName, outputTableName)


        #QgsProject.instance().layerTreeRegistryBridge().setLayerInsertionPoint( QgsProject.instance().layerTreeRoot(), 0 )
        groupName = self.tr("emissions calculation results") + " {}".format(uid)
        #root = QgsProject.instance().layerTreeRoot()
        #rootGroup = root.insertGroup(0, groupName)

        rootGroup = self.iface.layerTreeView().currentGroupNode()
        if rootGroup != None:
            rootGroup = rootGroup.addGroup(groupName) # ret QgsLayerTreeGroup 
        else:
            root = QgsProject.instance().layerTreeRoot()
            rootGroup = root.insertGroup(0, groupName)

        # order = QgsProject.instance().layerTreeRoot().customLayerOrder()
        # order.insert( 0, order.pop( order.index( vlayer.id() ) ) ) # vlayer to the top
        # bridge.setCustomLayerOrder( order )

        layerNames = []
        layerNames.append((self.tr('CO2 sources grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_sources.qml')))
        layerNames.extend(self.createUrbanDevelopmentVisualizations(uid, outputSchemaName, outputTableName))
        layerNames.extend(self.calculateRelativeEmissions(uid, outputSchemaName, outputTableName))
        layerNames.append((self.tr('CO2 total grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_t_grid.qml')))

        self.visualizeTrafficEmissions(rootGroup, uid, outputSchemaName, outputTableName)
        self.visualizeThermoEmissions(rootGroup, uid, outputSchemaName, outputTableName)
        self.visualizeElectricityEmissions(rootGroup, uid, outputSchemaName, outputTableName)

        uri = QgsDataSourceUri()
        uri.setConnection(self.connParams['host'], self.connParams['port'],\
            self.connParams['database'], self.connParams['user'], self.connParams['password'])
        uri.setDataSource(outputSchemaName, outputTableName, 'geom')


        groupName = self.tr("general")
        group = rootGroup.addGroup(groupName)

        for name in layerNames:
            layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
            layer.loadNamedStyle(name[1])
            renderer = layer.renderer()
            if renderer.type() == 'graduatedSymbol':
                renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
            QgsProject.instance().addMapLayer(layer, False)
            group.addLayer(layer)


    def addPopulationToResultsTableIfNeeded(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(md.comboBoxYkrPop.currentText())

        queries = []

        if ykrPopTableName != None and ykrPopTableName != '-':
            ykrPopTableNameParts = ykrPopTableName.split('.')

            query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN v_yht integer DEFAULT 0"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET v_yht = (SELECT v_yht FROM \"" + ykrPopTableNameParts[0] + "\".\"" + ykrPopTableNameParts[1] + "\" AS ykr WHERE ykr.xyind = out_grid.xyind AND out_grid.mun = NULLIF(ykr.kunta, '')::int)"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.addPopulationToResultsTableIfNeeded(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def addJobsToResultsTable(self, uid, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        ykrJobTableName = self.ykrToolDictionaries.getYkrJobTableDatabaseTableName(md.comboBoxYkrJob.currentText())
        ykrJobTableNameParts = ykrJobTableName.split('.')

        queries = []
        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN tp_yht integer DEFAULT 0"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET tp_yht = (SELECT tp_yht FROM \"" + ykrJobTableNameParts[0] + "\".\"" + ykrJobTableNameParts[1] + "\" AS ykr WHERE ykr.xyind = out_grid.xyind AND out_grid.mun = NULLIF(ykr.kunta, '')::int)"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        if self.calculateFuture:
            # calculate change in workplaces for each square and update tp_yht accordingly
            queries.extend(self.createCalculateFutureJobsQueries(uid, outputSchemaName, outputTableName))
        
        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.addJobsToResultsTable(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        conn.commit()

        return True

    def createUrbanDevelopmentVisualizations(self, uid, outputSchemaName, outputTableName):
        layerNames = []
        
        if self.mainDialog.checkBoxVisualizePopJobMix.isChecked():
            success = self.calculatePopJobMix(outputSchemaName, outputTableName)
            if success:
                ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(self.mainDialog.comboBoxYkrPop.currentText())
                if ykrPopTableName == '-':
                    layerNames.append((self.tr('pop job mix grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_pop_job_mix_grid.qml')))
                else:
                    layerNames.append((self.tr('v_yht job mix grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_pop_job_mix_grid.qml')))

        if self.mainDialog.checkBoxVisualizeGoodZonesForPopJobDensityAndSustainableTransport.isChecked():
            layerNames.append((self.tr('good UZ zones for population, jobs and sustainable transport grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/good_uz_zones_grid.qml')))
        
        return layerNames


    def visualizeElectricityEmissions(self, rootGroup, uid, outputSchemaName, outputTableName):
        layerNames = []
    
        if self.mainDialog.checkBoxVisualizeElectricityConsumptionEmissions.isChecked():
            layerNames.append((self.tr('CO2 electricity sources grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_electricity_sources_grid.qml')))
            layerNames.append((self.tr('CO2 electricity total grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_electricity_grid.qml')))
            layerNames.append((self.tr('CO2 buildings electricity grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_buildings_electricity_grid.qml')))
            layerNames.append((self.tr('CO2 household electricity grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_household_electricity_grid.qml')))
            layerNames.append((self.tr('CO2 amenities electricity grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_amenities_electricity_grid.qml')))
            layerNames.append((self.tr('CO2 industry and warehouses electricity grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_industry_warehouses_electricity_grid.qml')))

            layerNames.extend(self.calculateRelativeElectricityEmissions(uid, outputSchemaName, outputTableName))

            groupName = self.tr("electricity emissions")
            group = rootGroup.addGroup(groupName)

            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
                self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(outputSchemaName, outputTableName, 'geom')

            for name in layerNames:
                layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
                layer.loadNamedStyle(name[1])
                renderer = layer.renderer()
                if renderer.type() == 'graduatedSymbol':
                    renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
                QgsProject.instance().addMapLayer(layer, False)
                group.addLayer(layer)


    def calculateRelativeElectricityEmissions(self, uid, outputSchemaName, outputTableName):
        layerNames = []
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(self.mainDialog.comboBoxYkrPop.currentText())
        success = self.calculateElectricityEmissionsPerPerson(outputSchemaName, outputTableName)
        if success:
            if ykrPopTableName == '-':
                layerNames.append((self.tr('CO2 electricity emissions / pop grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_electricity_pop_grid.qml')))
            else:
                layerNames.append((self.tr('CO2 electricity emissions / v_yht grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/electricity/CO2_electricity_pop_grid.qml')))

        return layerNames



    def visualizeThermoEmissions(self, rootGroup, uid, outputSchemaName, outputTableName):
        layerNames = []
    
        if self.mainDialog.checkBoxVisualizeThermoEmissions.isChecked():
            layerNames.append((self.tr('CO2 buildings thermo sources grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_thermo_sources_grid.qml')))
            layerNames.append((self.tr('CO2 buildings thermo total grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_thermo_grid.qml')))
            layerNames.append((self.tr('CO2 buildings water heating grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_water_heating_grid.qml')))
            layerNames.append((self.tr('CO2 buildings heating grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_heating_grid.qml')))
            layerNames.append((self.tr('CO2 buildings cooling grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_cooling_grid.qml')))

            layerNames.extend(self.calculateRelativeThermoEmissions(uid, outputSchemaName, outputTableName))

            groupName = self.tr("buildings thermo emissions")
            group = rootGroup.addGroup(groupName)

            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
                self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(outputSchemaName, outputTableName, 'geom')

            for name in layerNames:
                layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
                layer.loadNamedStyle(name[1])
                renderer = layer.renderer()
                if renderer.type() == 'graduatedSymbol':
                    renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
                QgsProject.instance().addMapLayer(layer, False)
                group.addLayer(layer)


    def calculateRelativeThermoEmissions(self, uid, outputSchemaName, outputTableName):
        layerNames = []
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(self.mainDialog.comboBoxYkrPop.currentText())
        success = self.calculateThermoEmissionsPerPerson(outputSchemaName, outputTableName)
        if success:
            if ykrPopTableName == '-':
                layerNames.append((self.tr('CO2 buildings thermo emissions / pop grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_thermo_pop_grid.qml')))
            else:
                layerNames.append((self.tr('CO2 buildings thermo emissions / v_yht grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/thermo/CO2_buildings_thermo_pop_grid.qml')))

        return layerNames


    def visualizeTrafficEmissions(self, rootGroup, uid, outputSchemaName, outputTableName):
        layerNames = []
    
        if self.mainDialog.checkBoxVisualizeTrafficEmissions.isChecked():
            layerNames.append((self.tr('CO2 traffic sources grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_traffic_sources_grid.qml')))
            layerNames.append((self.tr('CO2 traffic total grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_traffic_grid.qml')))
            layerNames.append((self.tr('CO2 commuter and other population traffic grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_personal_traffic_grid.qml')))
            layerNames.append((self.tr('CO2 industry and warehouses traffic grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_iwhs_traffic_grid.qml')))
            layerNames.append((self.tr('CO2 amenities traffic grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_amenities_traffic_grid.qml')))

            layerNames.extend(self.calculateRelativeTrafficEmissions(uid, outputSchemaName, outputTableName))


            groupName = self.tr("traffic emissions")
            group = rootGroup.addGroup(groupName)

            uri = QgsDataSourceUri()
            uri.setConnection(self.connParams['host'], self.connParams['port'],\
                self.connParams['database'], self.connParams['user'], self.connParams['password'])
            uri.setDataSource(outputSchemaName, outputTableName, 'geom')

            for name in layerNames:
                layer = QgsVectorLayer(uri.uri(False), name[0], 'postgres')
                layer.loadNamedStyle(name[1])
                renderer = layer.renderer()
                if renderer.type() == 'graduatedSymbol':
                    renderer.updateClasses(layer, renderer.mode(), len(renderer.ranges()))
                QgsProject.instance().addMapLayer(layer, False)
                group.addLayer(layer)


    def calculateRelativeTrafficEmissions(self, uid, outputSchemaName, outputTableName):
        layerNames = []
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(self.mainDialog.comboBoxYkrPop.currentText())
        success = self.calculateTrafficEmissionsPerPerson(outputSchemaName, outputTableName)
        if success:
            if ykrPopTableName == '-':
                layerNames.append((self.tr('CO2 traffic emissions / pop grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_traffic_pop_grid.qml')))
            else:
                layerNames.append((self.tr('CO2 traffic emissions / v_yht grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/traffic/CO2_traffic_pop_grid.qml')))

        return layerNames


    def calculateRelativeEmissions(self, uid, outputSchemaName, outputTableName):
        layerNames = []
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(self.mainDialog.comboBoxYkrPop.currentText())
        if self.mainDialog.checkBoxCalculateEmissionsPerPerson.isChecked():
            success = self.calculateEmissionsPerPerson(outputSchemaName, outputTableName)
            if success:
                if ykrPopTableName == '-':
                    layerNames.append((self.tr('CO2 / pop grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_pop_grid.qml')))
                else:
                    layerNames.append((self.tr('CO2 / v_yht grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_pop_grid.qml')))

        if self.mainDialog.checkBoxCalculateEmissionsPerJob.isChecked():
            success = self.calculateEmissionsPerJob(uid, outputSchemaName, outputTableName)
            if success:
                layerNames.append((self.tr('CO2 / job grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_job_grid.qml')))

        if self.mainDialog.checkBoxCalculateEmissionsPerPerson.isChecked() and self.mainDialog.checkBoxCalculateEmissionsPerJob.isChecked():
            success = self.calculateEmissionsPerPersonJob(outputSchemaName, outputTableName)
            if success:
                if ykrPopTableName == '-':
                    layerNames.append((self.tr('CO2 / (pop + job) grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_pop_job_grid.qml')))
                else:
                    layerNames.append((self.tr('CO2 / (v_yht + job) grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_pop_job_grid.qml')))

        if self.mainDialog.checkBoxCalculateEmissionsPerFloorSpaceSquares.isChecked():
            success = self.calculateEmissionsPerFloorSpaceSquares(outputSchemaName, outputTableName)
            if success:
                layerNames.append((self.tr('CO2 / floor space squares grid') + ' {}'.format(uid), os.path.join(self.plugin_dir, 'docs/CO2_floor_space_squares_grid.qml')))

        return layerNames


    def calculateElectricityEmissionsPerPerson(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(md.comboBoxYkrPop.currentText())

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_sahko_tco2_per_sum_yhteensa_tco2 real"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        if ykrPopTableName == '-':
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_sahko_tco2_per_sum_yhteensa_tco2 = (sum_sahko_tco2 / NULLIF(pop, 0))"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        elif ykrPopTableName != None:
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_sahko_tco2_per_sum_yhteensa_tco2 = (sum_sahko_tco2 / v_yht)"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateElectricityEmissionsPerPerson(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def calculateThermoEmissionsPerPerson(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(md.comboBoxYkrPop.currentText())

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_lammonsaato_tco2_per_sum_yhteensa_tco2 real"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        if ykrPopTableName == '-':
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_lammonsaato_tco2_per_sum_yhteensa_tco2 = (sum_lammonsaato_tco2 / NULLIF(pop, 0))"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        elif ykrPopTableName != None:
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_lammonsaato_tco2_per_sum_yhteensa_tco2 = (sum_lammonsaato_tco2 / v_yht)"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateThermoEmissionsPerPerson(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def calculateTrafficEmissionsPerPerson(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(md.comboBoxYkrPop.currentText())

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_liikenne_tco2_per_sum_yhteensa_tco2 real"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        if ykrPopTableName == '-':
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_liikenne_tco2_per_sum_yhteensa_tco2 = (sum_yhteensa_tco2 / NULLIF(pop, 0))"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        elif ykrPopTableName != None:
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_liikenne_tco2_per_sum_yhteensa_tco2 = (sum_yhteensa_tco2 / v_yht)"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateTrafficEmissionsPerPerson(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True

    def calculatePopJobMix(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN pop_per_popjob_percentage numeric(10, 1)"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(md.comboBoxYkrPop.currentText())
        if ykrPopTableName == '-':
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET pop_per_popjob_percentage = (COALESCE(pop, 0)::real / NULLIF(COALESCE(pop, 0) + COALESCE(tp_yht, 0), 0) * 100)"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
        else:
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET pop_per_popjob_percentage = (COALESCE(v_yht, 0)::real / NULLIF(COALESCE(v_yht, 0) + COALESCE(tp_yht, 0), 0) * 100)"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)


        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculatePopJobMix(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True



    def calculateEmissionsPerFloorSpaceSquares(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_yhteensa_tco2_per_kem real"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_kem = (sum_yhteensa_tco2 / NULLIF(floorspace, 0))"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateEmissionsPerFloorSpaceSquares(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def calculateEmissionsPerPersonJob(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_yhteensa_tco2_per_as_tp real"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(md.comboBoxYkrPop.currentText())
        if ykrPopTableName == '-':
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_as_tp = (sum_yhteensa_tco2 / NULLIF(COALESCE(pop, 0) + COALESCE(tp_yht, 0), 0))"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
        else:
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_as_tp = (sum_yhteensa_tco2 / NULLIF(COALESCE(v_yht, 0) + COALESCE(tp_yht, 0), 0))"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
        
        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateEmissionsPerPersonJob(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True

    def calculateEmissionsPerPerson(self, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []
        ykrPopTableName = self.ykrToolDictionaries.getYkrPopTableDatabaseTableName(md.comboBoxYkrPop.currentText())

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_yhteensa_tco2_per_asukas real"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        if ykrPopTableName == '-':
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_asukas = (sum_yhteensa_tco2 / NULLIF(pop, 0))"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        elif ykrPopTableName != None:
            query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_asukas = (sum_yhteensa_tco2 / v_yht)"
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateEmissionsPerPerson(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        return True


    def calculateEmissionsPerJob(self, uid, outputSchemaName, outputTableName, retriesLeft=3):
        md = self.mainDialog
        queries = []
        ykrJobTableName = self.ykrToolDictionaries.getYkrJobTableDatabaseTableName(md.comboBoxYkrJob.currentText())
        ykrJobTableNameParts = ykrJobTableName.split('.')

        query = "ALTER TABLE " + outputSchemaName + ".\"" + outputTableName + "\" ADD COLUMN sum_yhteensa_tco2_per_tp real"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)
        
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" AS out_grid SET sum_yhteensa_tco2_per_tp = (sum_yhteensa_tco2 / NULLIF(tp_yht, 0))"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.calculateEmissionsPerJob(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
                conn.commit()
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        conn.commit()

        return True


    def createCalculateFutureJobsQueries(self, uid, outputSchemaName, outputTableName):
        '''calculate change in workplaces for each square and update tp_yht accordingly'''
        # TODO should include municipality code in the future zoning areas and take into account in the future jobs calculation
        # TODO take into note that there can be difference between the calculation year (now) and
        #  - the YKR workplace data (old) and
        #  - future zoning data (a zone starting earlier than the calculation year (now))

        md = self.mainDialog

        queries = []

        futureZoningAreasSchemaTableName = self.ykrToolDictionaries.getPredefinedFutureZoningAreasDatabaseTableName(md.comboBoxPredefinedFutureAreas.currentText())
        futureZoningAreasSchemaName, futureZoningAreasTableName = futureZoningAreasSchemaTableName.replace('"', '').split('.')

        # Tee taulu työpaikkojen määrän laskemisen avuksi
        query = """CREATE TABLE user_output.\"{}_job_temp\"(
            id serial PRIMARY KEY,
            geom geometry(MultiPolygon, 3067) NOT NULL,
            xyind varchar NOT NULL,
            mun int4 NOT NULL,
            vuosi date NOT NULL,
            tp_vali_muutos integer DEFAULT 0,
            tp_vuosi_muutos real DEFAULT 0)
            """.format(uid)
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        # query = "ALTER TABLE user_output.\"" + uid + "_job_temp\" ADD COLUMN tp_vali_muutos integer"
        # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        # queries.append(query)

        years = range(self.sessionParams['baseYear'], self.targetYear + 1)

        # Lisää kullekin vuodelle oma rivinsä
        for year in years:
            query = """INSERT INTO user_output.\"{}_job_temp\"(geom, xyind, mun, vuosi)
                (SELECT geom, xyind, mun, to_date('{}-01-01', 'YYYY-MM-DD') FROM {})""".format(uid, year, "\"" + outputSchemaName.replace('"', '') + "\".\"" + outputTableName.replace('"', '') + "\"")
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
            # query = "ALTER TABLE user_output.\"" + uid + "_job_temp\" ADD COLUMN tp_vuosi_muutos_{} integer".format(year)
            # QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            # queries.append(query)
        
        # Laske kullekin vuodelle tuleva työpaikkojen muutos
        for year in years:
            query = """UPDATE user_output.\"{}_job_temp\" AS output_bau 
                SET tp_vuosi_muutos = (
                    SELECT COALESCE(SUM((ST_Area(
                        ST_Intersection(
                            output_bau.geom, kt_bau.geom
                        )
                    ) / ST_Area(kt_bau.geom)) *
		            ( 1.0 / (kt_bau.k_valmisv - kt_bau.k_aloitusv + 1)) *
                    kt_bau.k_tp_yht), 0)
                    FROM 
                    {} AS kt_bau 
                    WHERE
                        kt_bau.k_tp_yht > 0 AND 
                        date_part('year', output_bau.vuosi) >= kt_bau.k_aloitusv AND 
                        date_part('year', output_bau.vuosi) <= kt_bau.k_valmisv AND 
                        ST_Intersects(output_bau.geom, kt_bau.geom)
                )""".format(uid, "\"" + futureZoningAreasSchemaName + "\".\"" + futureZoningAreasTableName + "\"")
            QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
            queries.append(query)
                    
        # summaa työpaikkamuutokset yhteen ja tallenna summa kullekin ruudulle omaan sarakkeeseensa kohdevuodelle
        query = """UPDATE user_output.\"{}_job_temp\" AS output_bau SET tp_vali_muutos = (
            SELECT SUM(tp_vuosi_muutos)
            FROM user_output.\"{}_job_temp\" AS b
            WHERE (date_part('year', output_bau.vuosi) = {})
            AND output_bau.xyind = b.xyind
            AND b.vuosi <= output_bau.vuosi
            )""".format(uid, uid, self.targetYear)
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        ## päivitä työpaikat kohdevuodelle alkuhetken työpaikoista ja työpaikkojen muutossummasta
        query = """UPDATE {} AS result_table SET tp_yht = (
	        SELECT output_bau.tp_vali_muutos + COALESCE(result_table.tp_yht, 0)
            FROM user_output.\"{}_job_temp\" AS output_bau
            WHERE (date_part('year', output_bau.vuosi) = {} AND result_table.xyind = output_bau.xyind AND result_table.mun = output_bau.mun)
            )""".format("\"" + outputSchemaName.replace('"', '') + "\".\"" + outputTableName.replace('"', '') + "\"", uid, self.targetYear)
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        # DROP temp TABLE
        query = "DROP TABLE user_output.\"{}_job_temp\"".format(uid)
        queries.append(query)

        return queries


    def zeroCO2inNokianMyllySquare(self, outputSchemaName, outputTableName, retriesLeft=3):
        # name = str(uuid.uuid4())
        # layer = QgsVectorLayer(uri.uri(False), name, 'postgres')

        queries = []

        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET sum_yhteensa_tco2 = 0 WHERE xyind = '3141256822125'"
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)
        queries.append(query)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.zeroCO2inNokianMyllySquare(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            for query in queries:
                cur.execute(query)
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        conn.commit()

        return True


    def updateYearToResultTable(self, outputSchemaName, outputTableName, retriesLeft=3):
        query = "UPDATE " + outputSchemaName + ".\"" + outputTableName + "\" SET year = to_date('{}-01-01', 'YYYY-MM-DD')".format(self.targetYear)
        QgsMessageLog.logMessage("query: " + query, 'YKRTool', Qgis.Info)

        conn = None

        try:
            conn = createDbConnection(self.connParams)
        except Exception as e:
            if retriesLeft > 0:
                return self.updateYearToResultTable(outputSchemaName, outputTableName, retriesLeft - 1)
            else:
                self.iface.messageBar().pushMessage(
                    self.tr('Error in connecting to the database'),
                    str(e), Qgis.Warning, duration=0)
                return False

        try:
            cur = conn.cursor()
            cur.execute(query)
        except Exception as e:
            self.iface.messageBar().pushMessage(
                self.tr('Error in modifying the results table ') + "{}".format(query),
                str(e), Qgis.Warning, duration=0)
            conn.rollback()
            conn.close()

            return False

        conn.commit()

        return True


    def cleanUpSession(self):
        '''Delete temporary data and close db connection'''
        for table in list(self.tableNames.values()):
            if not table: continue
            try:
                self.cur.execute('DROP TABLE user_input."{}"'.format(table.lower()))
                self.conn.commit()
            except Exception as e:
                self.iface.messageBar().pushMessage(
                     self.tr('Error in removing temporary table ') + '{}'.format(table),
                    str(e), Qgis.Warning, duration=0)
                self.conn.rollback()

        if self.conn != None:
            self.conn.close()

    def postError(self):
        '''Called after querytask is terminated. Closes session'''
        self.cur.execute('DROP TABLE IF EXISTS user_input."ykr_{}"'.format(self.sessionParams['uuid']))
        self.cleanUpSession()
        self.iface.messageBar().pushMessage(self.tr('Error in performing calculation'),\
            self.tr('See further info in the error log'), Qgis.Critical, duration=0)
